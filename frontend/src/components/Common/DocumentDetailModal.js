import React, { useState, useEffect, useCallback } from 'react';
import { Modal, Tabs, Row, Col, Tag, Button, Space, Typography, Divider, Form, Input, message, Skeleton, Spin } from 'antd';
import { 
  FileTextOutlined, 
  EyeOutlined,
  DownloadOutlined,
  FileTextOutlined as AnalyzeIcon
} from '@ant-design/icons';
import documentService from '../../services/documentService';
import OnlineDocumentViewer from './OnlineDocumentViewer';

const { Text } = Typography;
const { TextArea } = Input;

const DocumentDetailModal = ({ 
  document, 
  visible, 
  onClose, 
  onVerify, 
  onReject,
  onAnalyze: externalOnAnalyze, // External analyze function
  analysis, // Analysis results from external source
  blockchainData, // Blockchain data for comparison
  comparisonResult, // Comparison result
  userRole = 'Org2', // 'Org1', 'Org2', 'Org3'
  analyzing: externalAnalyzing, // External analyzing state
  ...props
}) => {
  const [documentHistory, setDocumentHistory] = useState([]);
  const [historyLoading, setHistoryLoading] = useState(false);
  const [verifyModalOpen, setVerifyModalOpen] = useState(false);
  const [rejectModalOpen, setRejectModalOpen] = useState(false);
  const [verificationNotes, setVerificationNotes] = useState('');
  const [rejectionReason, setRejectionReason] = useState('');
  const [onlineViewerOpen, setOnlineViewerOpen] = useState(false);
  const [analyzing, setAnalyzing] = useState(false);
  
  // Get analyzing state from props if provided, otherwise use internal state
  const isAnalyzing = externalAnalyzing !== undefined ? externalAnalyzing : analyzing;

  // Helper function ƒë·ªÉ x√°c ƒë·ªãnh tr·∫°ng th√°i t√†i li·ªáu d·ª±a tr√™n logic 3 tr·∫°ng th√°i
  const getDocumentStatus = (doc) => {
    if (!doc) return { text: 'N/A', color: 'default' };
    
    if (doc.status === 'VERIFIED') {
      return { text: 'ƒê√£ th·∫©m ƒë·ªãnh', color: 'green' };
    }
    
    if (doc.status === 'REJECTED') {
      return { text: 'Kh√¥ng h·ª£p l·ªá', color: 'red' };
    }
    
    return { text: 'Ch·ªù x√°c th·ª±c', color: 'orange' };
  };

  // Load l·ªãch s·ª≠ t√†i li·ªáu khi modal m·ªü
  const loadDocumentHistory = useCallback(async () => {
    if (!document?.docID) return;
    
    try {
      setHistoryLoading(true);
      const history = await documentService.getDocumentHistory(document.docID);
      setDocumentHistory(Array.isArray(history) ? history : (history?.data ?? []));
    } catch (e) {
      console.warn('Kh√¥ng th·ªÉ load l·ªãch s·ª≠ t√†i li·ªáu:', e);
      setDocumentHistory([]);
    } finally {
      setHistoryLoading(false);
    }
  }, [document?.docID]);

  useEffect(() => {
    if (visible && document) {
      loadDocumentHistory();
    }
  }, [visible, document, loadDocumentHistory]);

  const handleVerify = async () => {
    try {
      if (!verificationNotes.trim()) {
        message.error('Vui l√≤ng nh·∫≠p ghi ch√∫ x√°c th·ª±c');
        return;
      }
      
      if (onVerify) {
        await onVerify(document.docID, verificationNotes);
        message.success('X√°c th·ª±c t√†i li·ªáu th√†nh c√¥ng');
        setVerifyModalOpen(false);
        setVerificationNotes('');
        onClose(); // ƒê√≥ng modal ch√≠nh
      }
    } catch (e) {
      message.error(e.message || 'X√°c th·ª±c th·∫•t b·∫°i');
    }
  };

  const handleReject = async () => {
    try {
      if (!rejectionReason.trim()) {
        message.error('Vui l√≤ng nh·∫≠p l√Ω do t·ª´ ch·ªëi');
        return;
      }
      
      if (onReject) {
        await onReject(document.docID, rejectionReason);
        message.success('T·ª´ ch·ªëi t√†i li·ªáu th√†nh c√¥ng');
        setRejectModalOpen(false);
        setRejectionReason('');
        onClose(); // ƒê√≥ng modal ch√≠nh
      }
    } catch (e) {
      message.error(e.message || 'T·ª´ ch·ªëi th·∫•t b·∫°i');
    }
  };

  const handlePreview = () => {
    setOnlineViewerOpen(true);
  };

  const handleDownload = async (doc) => {
    try {
      if (doc.ipfsHash) {
        // Implement download logic here
        message.info('Ch·ª©c nƒÉng t·∫£i v·ªÅ ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn');
      }
    } catch (e) {
      message.error('Kh√¥ng th·ªÉ t·∫£i v·ªÅ t√†i li·ªáu');
    }
  };

  const onAnalyze = async (docID) => {
    try {
      setAnalyzing(true);
      console.log('Starting document analysis for:', docID);
      
      // Call document analysis API with Gemini
      const result = await documentService.analyzeDocument(docID, true); // useGemini = true
      
      if (result.success && result.data && result.data.analysis) {
        const analysisData = result.data.analysis;
        console.log('Analysis result:', analysisData);
        
        // Display analysis results
        const extractedInfo = analysisData.extractedInfo;
        let analysisMessage = 'Ph√¢n t√≠ch t√†i li·ªáu ho√†n th√†nh:\n\n';
        
        if (extractedInfo) {
          if (extractedInfo.cccd) analysisMessage += `üÜî CCCD/CMND: ${extractedInfo.cccd}\n`;
          if (extractedInfo.landParcelID) analysisMessage += `üè† M√£ th·ª≠a ƒë·∫•t: ${extractedInfo.landParcelID}\n`;
          if (extractedInfo.ownerName) analysisMessage += `üë§ T√™n ch·ªß s·ª≠ d·ª•ng: ${extractedInfo.ownerName}\n`;
          if (extractedInfo.landArea) analysisMessage += `üìè Di·ªán t√≠ch: ${extractedInfo.landArea} m¬≤\n`;
          if (extractedInfo.landLocation) analysisMessage += `üìç ƒê·ªãa ch·ªâ: ${extractedInfo.landLocation}\n`;
          if (extractedInfo.landType) analysisMessage += `üåø Lo·∫°i ƒë·∫•t: ${extractedInfo.landType}\n`;
          if (analysisData.confidence) analysisMessage += `\nüìä ƒê·ªô tin c·∫≠y: ${analysisData.confidence}%`;
        }
        
        message.success({
          content: analysisMessage,
          duration: 10, // Show for 10 seconds
          style: { whiteSpace: 'pre-line' }
        });
      } else {
        throw new Error('D·ªØ li·ªáu ph√¢n t√≠ch kh√¥ng h·ª£p l·ªá');
      }
    } catch (e) {
      console.error('Analysis error:', e);
      message.error(e.message || 'Ph√¢n t√≠ch th·∫•t b·∫°i');
    } finally {
      setAnalyzing(false);
    }
  };

  const getFileTypeDisplay = (fileType) => {
    if (!fileType) return 'N/A';
    if (fileType.includes('pdf')) return 'PDF';
    if (fileType.includes('word') || fileType.includes('docx')) return 'DOCX';
    if (fileType.includes('excel') || fileType.includes('xlsx')) return 'XLSX';
    if (fileType.includes('image')) return 'IMAGE';
    return 'FILE';
  };

  const formatTimestamp = (timestamp) => {
    if (!timestamp) return 'N/A';
    
    let date;
    if (timestamp.seconds) {
      // Timestamp t·ª´ blockchain (seconds + nanos)
      date = new Date(timestamp.seconds * 1000 + (timestamp.nanos || 0) / 1000000);
    } else {
      // Timestamp th√¥ng th∆∞·ªùng
      date = new Date(timestamp);
    }
    
    return date.toLocaleString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  };

  // T·∫°o tabs d·ª±a tr√™n userRole
  const createTabItems = () => {
    const basicTab = {
      key: "1",
      label: "Th√¥ng tin c∆° b·∫£n",
      children: (
        <div style={{ padding: '16px 0' }}>
          <Row gutter={24}>
            <Col span={24}>
              <div style={{ marginBottom: 24, padding: '20px 0', borderBottom: '1px solid #f0f0f0' }}>
                <Text strong style={{ fontSize: 18 }}>{document?.title}</Text>
                <br />
                <Text type="secondary" style={{ fontSize: 13 }}>M√£: <code>{document?.docID}</code></Text>
              </div>
            </Col>
          </Row>
          <Row gutter={24}>
            <Col span={12}>
              <div style={{ marginBottom: 16 }}>
                <Text strong>Lo·∫°i t√†i li·ªáu</Text>
                <br />
                <Tag color="blue" style={{ marginTop: 6 }}>{document?.type}</Tag>
              </div>
            </Col>
            <Col span={12}>
              <div style={{ marginBottom: 16 }}>
                <Text strong>Tr·∫°ng th√°i</Text>
                <br />
                <div style={{ marginTop: 6 }}>
                  <Tag color={getDocumentStatus(document).color}>
                    {getDocumentStatus(document).text}
                  </Tag>
                </div>
              </div>
            </Col>
          </Row>
          <Row gutter={24}>
            <Col span={12}>
              <div style={{ marginBottom: 16 }}>
                <Text strong>Lo·∫°i file</Text>
                <br />
                <Tag color="blue" style={{ marginTop: 6 }}>{getFileTypeDisplay(document?.fileType)}</Tag>
              </div>
            </Col>
            <Col span={12}>
              <div style={{ marginBottom: 16 }}>
                <Text strong>K√≠ch th∆∞·ªõc</Text>
                <br />
                <Text type="secondary" style={{ marginTop: 6, display: 'block' }}>
                  {document?.fileSize ? `${(document.fileSize / 1024).toFixed(2)} KB` : 'N/A'}
                </Text>
              </div>
            </Col>
          </Row>
          <Row gutter={24}>
            <Col span={12}>
              <div style={{ marginBottom: 16 }}>
                <Text strong>Ng∆∞·ªùi upload</Text>
                <br />
                <Text type="secondary" style={{ marginTop: 6, display: 'block' }}>{document?.uploadedBy}</Text>
              </div>
            </Col>
            <Col span={12}>
              <div style={{ marginBottom: 16 }}>
                <Text strong>Ng√†y t·∫°o</Text>
                <br />
                <Text type="secondary" style={{ marginTop: 6, display: 'block' }}>
                  {document?.createdAt ? new Date(document.createdAt).toLocaleString('vi-VN') : 'N/A'}
                </Text>
              </div>
            </Col>
          </Row>
          <Row gutter={24}>
            <Col span={24}>
              <div style={{ marginBottom: 16 }}>
                <Text strong>M√¥ t·∫£</Text>
                <br />
                <Text type="secondary" style={{ marginTop: 6, display: 'block', lineHeight: 1.6 }}>
                  {document?.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
                </Text>
              </div>
            </Col>
          </Row>
          <Divider />
          <Row gutter={24}>
            <Col span={24}>
              <div style={{ textAlign: 'center', marginTop: 16 }}>
                <Space size="large">
                  <Button
                    type="primary"
                    icon={<EyeOutlined />}
                    onClick={handlePreview}
                    disabled={!document?.ipfsHash}
                    size="large"
                  >
                    Xem tr·ª±c tuy·∫øn
                  </Button>
                  <Button
                    icon={<DownloadOutlined />}
                    onClick={() => handleDownload(document)}
                    disabled={!document?.ipfsHash}
                    size="large"
                  >
                    T·∫£i v·ªÅ
                  </Button>
                </Space>
              </div>
            </Col>
          </Row>
          <Divider />
          {/* Status Display */}
          {document?.status === 'VERIFIED' ? (
            <div style={{
              background: '#f6ffed',
              border: '1px solid #b7eb8f',
              borderRadius: 8,
              padding: 16,
              textAlign: 'center',
              boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
            }}>
              <Text type="success" strong style={{ fontSize: 16 }}>
                ‚úÖ T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
              </Text>
              <div style={{
                marginTop: 12,
                display: 'flex',
                justifyContent: 'center',
                gap: 16,
                flexWrap: 'wrap',
              }}>
                <div style={{ background: '#e6ffe6', padding: '8px 12px', borderRadius: 4 }}>
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    B·ªüi: {document.verifiedBy || 'N/A'}
                  </Text>
                </div>
                <div style={{ background: '#e6ffe6', padding: '8px 12px', borderRadius: 4 }}>
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    L√∫c: {document.verifiedAt && document.verifiedAt !== '0001-01-01T00:00:00Z'
                      ? new Date(document.verifiedAt).toLocaleString('vi-VN')
                      : 'N/A'}
                  </Text>
                </div>
              </div>
            </div>
          ) : document?.status === 'REJECTED' ? (
            <div style={{
              background: '#fff2f0',
              border: '1px solid #ffccc7',
              borderRadius: 8,
              padding: 16,
              textAlign: 'center',
              boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
            }}>
              <Text strong style={{ fontSize: 16, color: '#cf1322' }}>
                ‚ùå T√†i li·ªáu ƒë√£ b·ªã t·ª´ ch·ªëi
              </Text>
              <div style={{
                marginTop: 12,
                display: 'flex',
                justifyContent: 'center',
                gap: 16,
                flexWrap: 'wrap',
              }}>
                <div style={{ background: '#ffe6e6', padding: '8px 12px', borderRadius: 4 }}>
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    B·ªüi: {(() => {
                      const rejectionMatch = document?.description?.match(/\[REJECTED: (.*?)\s*\|\s*By: (.*?)\s*\|\s*At: (.*?)\]/);
                      return rejectionMatch ? rejectionMatch[2] : 'N/A';
                    })()}
                  </Text>
                </div>
                <div style={{ background: '#ffe6e6', padding: '8px 12px', borderRadius: 4 }}>
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    L√∫c: {(() => {
                      const rejectionMatch = document?.description?.match(/\[REJECTED: (.*?)\s*\|\s*By: (.*?)\s*\|\s*At: (.*?)\]/);
                      return rejectionMatch ? new Date(rejectionMatch[3]).toLocaleString('vi-VN') : 'N/A';
                    })()}
                  </Text>
                </div>
              </div>
              <Text type="secondary" style={{ fontSize: 12, marginTop: 12 }}>
                T√†i li·ªáu n√†y kh√¥ng th·ªÉ ƒë∆∞·ª£c x√°c th·ª±c do ƒë√£ b·ªã t·ª´ ch·ªëi
              </Text>
            </div>
          ) : (
            <div style={{
              background: '#f0f8ff',
              border: '1px solid #d6e4ff',
              borderRadius: 8,
              padding: 16,
              textAlign: 'center',
              boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',
            }}>
              <Text type="secondary" strong style={{ fontSize: 16 }}>
                ‚úì T√†i li·ªáu ƒëang ch·ªù x√°c th·ª±c
              </Text>
            </div>
          )}
        </div>
      )
    };

    // T·∫°o analysisTab kh√°c nhau cho t·ª´ng userRole
    const getAnalysisTabContent = () => {
      if (userRole === 'Org1') {
        // Org1: Ch·ªâ c√≥ ph√¢n t√≠ch, kh√¥ng c√≥ ph·∫ßn x√°c th·ª±c
        return (
          <div>
            <div style={{ marginBottom: 16 }}>
              <Button
                type='primary'
                icon={<AnalyzeIcon />}
                onClick={() => externalOnAnalyze ? externalOnAnalyze(document?.docID) : onAnalyze(document?.docID)}
                loading={isAnalyzing}
                disabled={isAnalyzing}
              >
                {isAnalyzing ? 'ƒêang ph√¢n t√≠ch...' : 'Ph√¢n t√≠ch t√†i li·ªáu v·ªõi Gemini'}
              </Button>
            </div>
            
            {/* Loading overlay when analyzing */}
            {isAnalyzing ? (
              <div style={{
                position: 'relative',
                minHeight: 200,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                background: 'rgba(255, 255, 255, 0.9)',
                borderRadius: 8,
                border: '1px solid #e8e8e8'
              }}>
                <Spin size="large">
                  <div style={{ textAlign: 'center', marginTop: 16 }}>
                    <div style={{ fontSize: 16, fontWeight: 'bold', color: '#1890ff', marginBottom: 8 }}>
                      ü§ñ ƒêang ph√¢n t√≠ch t√†i li·ªáu v·ªõi Gemini AI
                    </div>
                    <div style={{ fontSize: 12, color: '#666' }}>
                      Vui l√≤ng ch·ªù trong gi√¢y l√°t...
                    </div>
                  </div>
                </Spin>
              </div>
            ) : (
              <div style={{ textAlign: 'center', padding: 32 }}>
                <Text type='secondary'>Ch∆∞a c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch</Text>
                <br />
                <Text type='secondary' style={{ fontSize: '12px' }}>
                  Nh·∫•n n√∫t "Ph√¢n t√≠ch t√†i li·ªáu" ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch
                </Text>
              </div>
            )}
          </div>
        );
      } else {
        // Org2: ƒê·∫ßy ƒë·ªß ph√¢n t√≠ch + x√°c th·ª±c
        return (
          <div>
            <div style={{ marginBottom: 16 }}>
              <Button
                type='primary'
                icon={<AnalyzeIcon />}
                onClick={() => externalOnAnalyze ? externalOnAnalyze(document?.docID) : onAnalyze(document?.docID)}
                loading={isAnalyzing}
                disabled={isAnalyzing}
              >
                {isAnalyzing ? 'ƒêang ph√¢n t√≠ch...' : 'Ph√¢n t√≠ch t√†i li·ªáu v·ªõi Gemini'}
              </Button>
            </div>
            
            {/* Loading overlay when analyzing */}
            {isAnalyzing ? (
              <div style={{
                position: 'relative',
                minHeight: 200,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                background: 'rgba(255, 255, 255, 0.9)',
                borderRadius: 8,
                border: '1px solid #e8e8e8'
              }}>
                <Spin size="large">
                  <div style={{ textAlign: 'center', marginTop: 16 }}>
                    <div style={{ fontSize: 16, fontWeight: 'bold', color: '#1890ff', marginBottom: 8 }}>
                      ü§ñ ƒêang ph√¢n t√≠ch t√†i li·ªáu v·ªõi Gemini AI
                    </div>
                    <div style={{ fontSize: 12, color: '#666' }}>
                      Vui l√≤ng ch·ªù trong gi√¢y l√°t...
                    </div>
                  </div>
                </Spin>
              </div>
            ) : analysis && analysis.extractedInfo ? (
              <div>
                <div style={{ marginBottom: 24 }}>
                  <Text strong style={{ fontSize: 16, color: '#1890ff' }}>Ph√¢n t√≠ch t√†i li·ªáu ho√†n th√†nh:</Text>
                </div>
                
                <Row gutter={16}>
                  <Col span={12}>
                    <div style={{ background: '#f0f2ff', padding: '12px', borderRadius: '8px', marginBottom: '12px' }}>
                      <Text strong>üÜî CCCD/CMND: </Text>
                      <Text>{analysis.extractedInfo.cccd || 'N/A'}</Text>
                    </div>
                  </Col>
                  <Col span={12}>
                    <div style={{ background: '#f0f2ff', padding: '12px', borderRadius: '8px', marginBottom: '12px' }}>
                      <Text strong>üè† M√£ th·ª≠a ƒë·∫•t: </Text>
                      <Text>{analysis.extractedInfo.landParcelID || 'N/A'}</Text>
                    </div>
                  </Col>
                </Row>
                
                <Row gutter={16}>
                  <Col span={12}>
                    <div style={{ background: '#f0f2ff', padding: '12px', borderRadius: '8px', marginBottom: '12px' }}>
                      <Text strong>üë§ T√™n ch·ªß s·ª≠ d·ª•ng: </Text>
                      <Text>{analysis.extractedInfo.ownerName || 'N/A'}</Text>
                    </div>
                  </Col>
                  <Col span={12}>
                    <div style={{ background: '#f0f2ff', padding: '12px', borderRadius: '8px', marginBottom: '12px' }}>
                      <Text strong>üìè Di·ªán t√≠ch: </Text>
                      <Text>{analysis.extractedInfo.landArea ? `${analysis.extractedInfo.landArea} m¬≤` : 'N/A'}</Text>
                    </div>
                  </Col>
                </Row>
                
                <Row gutter={16}>
                  <Col span={12}>
                    <div style={{ background: '#f0f2ff', padding: '12px', borderRadius: '8px', marginBottom: '12px' }}>
                      <Text strong>üìç ƒê·ªãa ch·ªâ: </Text>
                      <Text>{analysis.extractedInfo.landLocation || 'N/A'}</Text>
                    </div>
                  </Col>
                  <Col span={12}>
                    <div style={{ background: '#f0f2ff', padding: '12px', borderRadius: '8px', marginBottom: '12px' }}>
                      <Text strong>üåø Lo·∫°i ƒë·∫•t: </Text>
                      <Text>{analysis.extractedInfo.landType || 'N/A'}</Text>
                    </div>
                  </Col>
                </Row>
                
                {analysis.confidence && (
                  <div style={{ background: '#f6ffed', border: '1px solid #b7eb8f', borderRadius: '8px', padding: '12px', marginBottom: '16px', textAlign: 'center' }}>
                    <Text strong>üìä ƒê·ªô tin c·∫≠y: {analysis.confidence}%</Text>
                  </div>
                )}
                
                {/* Blockchain Comparison Results */}
                {comparisonResult && (
                  <div>
                    <Divider />
                    <Text strong style={{ fontSize: 16, color: '#1890ff' }}>K·∫øt qu·∫£ so s√°nh v·ªõi Blockchain:</Text>
                    <div style={{ marginTop: 16 }}>
                      <div style={{ 
                        background: comparisonResult.matchPercentage >= 80 ? '#f6ffed' : comparisonResult.matchPercentage <= 30 ? '#fff2f0' : '#fff7e6', 
                        border: comparisonResult.matchPercentage >= 80 ? '1px solid #b7eb8f' : comparisonResult.matchPercentage <= 30 ? '1px solid #ffccc7' : '1px solid #ffd591',
                        borderRadius: '8px', 
                        padding: '16px', 
                        textAlign: 'center',
                        marginBottom: '16px'
                      }}>
                        <Text strong style={{ fontSize: 18 }}>
                          ƒê·ªô kh·ªõp: {comparisonResult.matchPercentage}%
                        </Text>
                        <br />
                        <Text type="secondary">
                          Kh·ªõp {comparisonResult.matchedFields}/{comparisonResult.totalFields} tr∆∞·ªùng th√¥ng tin
                        </Text>
                      </div>
                      
                      {/* Detailed comparison */}
                      {comparisonResult.details && comparisonResult.details.length > 0 && (
                        <div style={{ background: '#fafafa', padding: '12px', borderRadius: '8px' }}>
                          <Text strong style={{ marginBottom: 8, display: 'block' }}>Chi ti·∫øt so s√°nh:</Text>
                          {comparisonResult.details.map((detail, index) => (
                            <div key={index} style={{ marginBottom: '4px' }}>
                              <Text style={{ fontSize: '12px' }}>{detail}</Text>
                            </div>
                          ))}
                        </div>
                      )}
                      
                      {/* Recommendation */}
                      {comparisonResult.recommendation && (
                        <div style={{ 
                          marginTop: 16,
                          background: comparisonResult.recommendation === 'verify' ? '#f6ffed' : comparisonResult.recommendation === 'reject' ? '#fff2f0' : '#fff7e6',
                          border: comparisonResult.recommendation === 'verify' ? '1px solid #b7eb8f' : comparisonResult.recommendation === 'reject' ? '1px solid #ffccc7' : '1px solid #ffd591',
                          borderRadius: '8px', 
                          padding: '12px'
                        }}>
                          <Text strong>Khuy·∫øn ngh·ªã: </Text>
                          <Text>
                            {comparisonResult.recommendation === 'verify' ? '‚úÖ N√™n x√°c th·ª±c t√†i li·ªáu' : 
                             comparisonResult.recommendation === 'reject' ? '‚ùå N√™n t·ª´ ch·ªëi t√†i li·ªáu' : 
                             '‚ö†Ô∏è C·∫ßn xem x√©t k·ªπ th√™m'}
                          </Text>
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            ) : !isAnalyzing ? (
              <div style={{ textAlign: 'center', padding: 32 }}>
                <Text type='secondary'>Ch∆∞a c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch</Text>
                <br />
                <Text type='secondary' style={{ fontSize: '12px' }}>
                  Nh·∫•n n√∫t "Ph√¢n t√≠ch t√†i li·ªáu" ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch v√† h·ªó tr·ª£ quy·∫øt ƒë·ªãnh x√°c th·ª±c
                </Text>
              </div>
            ) : null}
            <Divider />
            <div
              style={{
                background: '#f0f8ff',
                border: '1px solid #d6e4ff',
                borderRadius: '8px',
                padding: '20px',
                textAlign: 'center',
              }}
            >
              <Text strong style={{ fontSize: '16px', marginBottom: '16px', display: 'block' }}>
                üéØ Ch·ª©c nƒÉng x√°c th·ª±c t√†i li·ªáu
              </Text>
              <Text type='secondary' style={{ marginBottom: '16px', display: 'block' }}>
                X√°c th·ª±c ho·∫∑c t·ª´ ch·ªëi t√†i li·ªáu n√†y sau khi ph√¢n t√≠ch
              </Text>
              <Space size='large'>
                <Button
                  type='primary'
                  icon={<FileTextOutlined />}
                  onClick={() => setVerifyModalOpen(true)}
                  size='large'
                  style={{ minWidth: '120px' }}
                  disabled={document?.status === 'VERIFIED' || document?.status === 'REJECTED'}
                >
                  X√°c th·ª±c
                </Button>
                <Button
                  danger
                  icon={<FileTextOutlined />}
                  onClick={() => setRejectModalOpen(true)}
                  size='large'
                  style={{ minWidth: '120px' }}
                  disabled={document?.status === 'VERIFIED' || document?.status === 'REJECTED'}
                >
                  T·ª´ ch·ªëi
                </Button>
              </Space>
            </div>
          </div>
        );
      }
    };

    const analysisTab = {
      key: '2',
      label: 'Ph√¢n t√≠ch t√†i li·ªáu',
      children: getAnalysisTabContent()
    };

    const historyTab = {
      key: "4",
      label: "L·ªãch s·ª≠ thay ƒë·ªïi",
      children: (
        <div style={{ padding: '16px 0' }}>
          {/* L·ªãch s·ª≠ thay ƒë·ªïi t·ª´ chaincode GetHistoryForKey */}
          <div style={{ marginBottom: 16 }}>
            <Text strong style={{ fontSize: 16 }}>L·ªãch s·ª≠ thay ƒë·ªïi t√†i li·ªáu</Text>
          </div>
          
          {historyLoading ? (
            <Skeleton active />
          ) : documentHistory && documentHistory.length > 0 ? (
            <div>
              {documentHistory.map((item, index) => (
                <div key={index} style={{ 
                  background: '#fff', 
                  border: '1px solid #e8e8e8', 
                  borderRadius: '8px', 
                  padding: '16px',
                  marginBottom: '12px'
                }}>
                  <Row gutter={16}>
                    <Col span={24}>
                      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: 8 }}>
                        <Tag color={item.isDelete ? 'red' : 'blue'}>
                          {item.isDelete ? 'ƒê√£ x√≥a' : 'Thay ƒë·ªïi'}
                        </Tag>
                        <Text type="secondary" style={{ fontSize: '12px' }}>
                          {formatTimestamp(item.timestamp)}
                        </Text>
                      </div>
                    </Col>
                  </Row>
                  
                  <Row gutter={16}>
                    <Col span={12}>
                      <Text strong>Transaction ID:</Text>
                      <br />
                      <Text type="secondary" style={{ fontSize: '12px', fontFamily: 'monospace' }}>
                        {item.txId}
                      </Text>
                    </Col>
                    <Col span={12}>
                      <Text strong>Ti√™u ƒë·ªÅ:</Text>
                      <br />
                      <Text type="secondary">{item.document?.title || 'N/A'}</Text>
                    </Col>
                  </Row>
                  
                  <Row gutter={16} style={{ marginTop: 8 }}>
                    <Col span={12}>
                      <Text strong>Lo·∫°i t√†i li·ªáu:</Text>
                      <br />
                      <Tag color="blue">{item.document?.type || 'N/A'}</Tag>
                    </Col>
                    <Col span={12}>
                      <Text strong>Tr·∫°ng th√°i x√°c th·ª±c:</Text>
                      <br />
                      <Tag color={getDocumentStatus(item.document).color}>
                        {getDocumentStatus(item.document).text}
                      </Tag>
                    </Col>
                  </Row>
                  
                  <Row gutter={16} style={{ marginTop: 8 }}>
                    <Col span={12}>
                      <Text strong>Ng∆∞·ªùi x√°c th·ª±c:</Text>
                      <br />
                      <Text type="secondary">{item.document?.verifiedBy || 'Ch∆∞a c√≥'}</Text>
                    </Col>
                    <Col span={12}>
                      <Text strong>Ng√†y x√°c th·ª±c:</Text>
                      <br />
                      <Text type="secondary">
                        {item.document?.verifiedAt && item.document.verifiedAt !== '0001-01-01T00:00:00Z' ? 
                          new Date(item.document.verifiedAt).toLocaleString('vi-VN') : 'Ch∆∞a c√≥'
                        }
                      </Text>
                    </Col>
                  </Row>
                  
                  <Row gutter={16} style={{ marginTop: 8 }}>
                    <Col span={12}>
                      <Text strong>Ng∆∞·ªùi upload:</Text>
                      <br />
                      <Text type="secondary">{item.document?.uploadedBy || 'N/A'}</Text>
                    </Col>
                    <Col span={12}>
                      <Text strong>Ng√†y t·∫°o:</Text>
                      <br />
                      <Text type="secondary">
                        {item.document?.createdAt ? new Date(item.document.createdAt).toLocaleString('vi-VN') : 'N/A'}
                      </Text>
                    </Col>
                  </Row>
                  
                  <Row gutter={16} style={{ marginTop: 8 }}>
                    <Col span={12}>
                      <Text strong>Ng√†y c·∫≠p nh·∫≠t:</Text>
                      <br />
                      <Text type="secondary">
                        {item.document?.updatedAt ? new Date(item.document.updatedAt).toLocaleString('vi-VN') : 'N/A'}
                      </Text>
                    </Col>
                    <Col span={12}>
                      <Text strong>IPFS Hash:</Text>
                      <br />
                      <Text type="secondary" style={{ fontSize: '12px', fontFamily: 'monospace' }}>
                        {item.document?.ipfsHash || 'N/A'}
                      </Text>
                    </Col>
                  </Row>
                </div>
              ))}
            </div>
          ) : (
            <div style={{ 
              background: '#f9f9f9', 
              border: '1px solid #e8e8e8', 
              borderRadius: '8px', 
              padding: '32px',
              textAlign: 'center'
            }}>
              <Text type="secondary">Ch∆∞a c√≥ l·ªãch s·ª≠ thay ƒë·ªïi</Text>
            </div>
          )}
        </div>
      )
    };

    // Tr·∫£ v·ªÅ tabs t√πy theo userRole
    if (userRole === 'Org3') {
      // Org3: Ch·ªâ c√≥ tab th√¥ng tin c∆° b·∫£n v√† l·ªãch s·ª≠
      return [basicTab, historyTab];
    } else if (userRole === 'Org2') {
      // Org2: C√≥ t·∫•t c·∫£ tabs
      return [basicTab, analysisTab, historyTab];
    } else {
      // Org1: C√≥ tab th√¥ng tin, ph√¢n t√≠ch v√† l·ªãch s·ª≠ (kh√¥ng c√≥ n√∫t x√°c th·ª±c/t·ª´ ch·ªëi)
      return [basicTab, analysisTab, historyTab];
    }
  };

  const tabItems = createTabItems();

  return (
    <>
      {/* Modal ch√≠nh */}
      <Modal
        title="Chi ti·∫øt t√†i li·ªáu & Ph√¢n t√≠ch"
        open={visible}
        onCancel={onClose}
        width={800}
        footer={[
          <Button key="close" onClick={onClose}>
            ƒê√≥ng
          </Button>
        ]}
      >
        {document ? (
          <div>
            <Tabs 
              defaultActiveKey="1"
              items={tabItems}
            />
          </div>
        ) : (
          <Skeleton active />
        )}
      </Modal>

      {/* Modal x√°c th·ª±c */}
      <Modal
        title="X√°c th·ª±c t√†i li·ªáu"
        open={verifyModalOpen}
        onOk={handleVerify}
        onCancel={() => {
          setVerifyModalOpen(false);
          setVerificationNotes('');
        }}
        confirmLoading={false}
        okText="X√°c th·ª±c"
        cancelText="H·ªßy"
        width={500}
      >
        <div style={{ padding: '16px 0' }}>
          <p><strong>T√†i li·ªáu:</strong> {document?.title}</p>
          <p><strong>M√£:</strong> {document?.docID}</p>
          <Divider />
          <Form layout="vertical">
            <Form.Item 
              label="Ghi ch√∫ x√°c th·ª±c" 
              required
              help="Nh·∫≠p ghi ch√∫ v·ªÅ vi·ªác x√°c th·ª±c t√†i li·ªáu n√†y"
            >
              <TextArea
                rows={4}
                placeholder="Nh·∫≠p ghi ch√∫ x√°c th·ª±c..."
                value={verificationNotes}
                onChange={(e) => setVerificationNotes(e.target.value)}
              />
            </Form.Item>
          </Form>
        </div>
      </Modal>

      {/* Modal t·ª´ ch·ªëi */}
      <Modal
        title="T·ª´ ch·ªëi t√†i li·ªáu"
        open={rejectModalOpen}
        onOk={handleReject}
        onCancel={() => {
          setRejectModalOpen(false);
          setRejectionReason('');
        }}
        confirmLoading={false}
        okText="T·ª´ ch·ªëi"
        cancelText="H·ªßy"
        width={500}
        okButtonProps={{ danger: true }}
      >
        <div style={{ padding: '16px 0' }}>
          <p><strong>T√†i li·ªáu:</strong> {document?.title}</p>
          <p><strong>M√£:</strong> {document?.docID}</p>
          <Divider />
          <Form layout="vertical">
            <Form.Item 
              label="L√Ω do t·ª´ ch·ªëi" 
              required
              help="Nh·∫≠p l√Ω do t·ª´ ch·ªëi t√†i li·ªáu n√†y"
            >
              <TextArea
                rows={4}
                placeholder="Nh·∫≠p l√Ω do t·ª´ ch·ªëi..."
                value={rejectionReason}
                onChange={(e) => setRejectionReason(e.target.value)}
              />
            </Form.Item>
          </Form>
        </div>
      </Modal>

      {/* Online Document Viewer */}
      <OnlineDocumentViewer
        visible={onlineViewerOpen}
        onCancel={() => setOnlineViewerOpen(false)}
        document={document}
      />
    </>
  );
};

export default DocumentDetailModal;
