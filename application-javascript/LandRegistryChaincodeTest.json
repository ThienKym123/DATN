{
    "info": {
        "name": "Land Management System Test",
        "description": "Test suite for Land Management System APIs integrated with server.js. Tests users from Org1, Org2, and Org3, covering registration, authentication, account management, and chaincode operations with organization-based authorization, robust error handling, and Vietnam time zone (+07:00). Updated to reflect server.js services, using cccd instead of userId, and synchronized with utils.go and contract.go.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "User Registration",
            "description": "Register users across Org1, Org2, and Org3 with OTP flow.",
            "item": [
                {
                    "name": "Register UserOrg1_1 (Org1, Admin)",
                    "description": "Register an admin user in Org1 with OTP sent. Requires admin authentication.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" },
                            { "key": "Authorization", "value": "Bearer {{org1_admin_token}}" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"org\":\"Org1\",\"cccd\":\"123456789012\",\"phone\":\"+84987654321\",\"fullName\":\"Nguyen Van A\",\"password\":\"Password123!\",\"role\":\"admin\"}"
                        },
                        "url": "{{baseUrl}}/register"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Register UserOrg1_1 Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('OTP sent to phone');",
                                    "    pm.expect(jsonData.cccd).to.equal('123456789012');",
                                    "    pm.expect(jsonData.phone).to.equal('+84987654321');",
                                    "    pm.environment.set('org1_user_cccd', jsonData.cccd);",
                                    "});",
                                    "pm.test('Register UserOrg1_1 Duplicate CCCD', function () {",
                                    "    pm.sendRequest({",
                                    "        url: '{{baseUrl}}/register',",
                                    "        method: 'POST',",
                                    "        header: {",
                                    "            'Content-Type': 'application/json',",
                                    "            'Authorization': 'Bearer {{org1_admin_token}}'",
                                    "        },",
                                    "        body: {",
                                    "            mode: 'raw',",
                                    "            raw: JSON.stringify({\"org\":\"Org1\",\"cccd\":\"123456789012\",\"phone\":\"+84987654321\",\"fullName\":\"Nguyen Van A\",\"password\":\"Password123!\",\"role\":\"admin\"})",
                                    "        }",
                                    "    }, function (err, res) {",
                                    "        pm.expect(res).to.have.status(400);",
                                    "        pm.expect(res.json().error).to.include('already exists');",
                                    "    });",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Register UserOrg2_1 (Org2, User)",
                    "description": "Register a user in Org2 with OTP sent. Requires admin authentication.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" },
                            { "key": "Authorization", "value": "Bearer {{org2_admin_token}}" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"org\":\"Org2\",\"cccd\":\"987654321012\",\"phone\":\"+84987654322\",\"fullName\":\"Tran Thi B\",\"password\":\"Password123!\",\"role\":\"user\"}"
                        },
                        "url": "{{baseUrl}}/register"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Register UserOrg2_1 Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('OTP sent to phone');",
                                    "    pm.expect(jsonData.cccd).to.equal('987654321012');",
                                    "    pm.expect(jsonData.phone).to.equal('+84987654322');",
                                    "    pm.environment.set('org2_user_cccd', jsonData.cccd);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Register UserOrg3_1 (Org3, Citizen)",
                    "description": "Register a citizen in Org3 without authentication (self-registration).",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"org\":\"Org3\",\"cccd\":\"456789123456\",\"phone\":\"+84987654323\",\"fullName\":\"Le Van C\",\"password\":\"Password123!\"}"
                        },
                        "url": "{{baseUrl}}/register"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Register UserOrg3_1 Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('OTP sent to phone');",
                                    "    pm.expect(jsonData.cccd).to.equal('456789123456');",
                                    "    pm.expect(jsonData.phone).to.equal('+84987654323');",
                                    "    pm.environment.set('org3_user_cccd', jsonData.cccd);",
                                    "});",
                                    "pm.test('Register UserOrg3_1 Invalid Org', function () {",
                                    "    pm.sendRequest({",
                                    "        url: '{{baseUrl}}/register',",
                                    "        method: 'POST',",
                                    "        header: {'Content-Type': 'application/json'},",
                                    "        body: {",
                                    "            mode: 'raw',",
                                    "            raw: JSON.stringify({\"org\":\"Org1\",\"cccd\":\"456789123456\",\"phone\":\"+84987654323\",\"fullName\":\"Le Van C\",\"password\":\"Password123!\"})",
                                    "        }",
                                    "    }, function (err, res) {",
                                    "        pm.expect(res).to.have.status(403);",
                                    "        pm.expect(res.json().error).to.equal('Citizens can only register for Org3');",
                                    "    });",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Register with Invalid Data",
                    "description": "Test registration with invalid data to verify validation functions.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"org\":\"Org3\",\"cccd\":\"123\",\"phone\":\"invalid\",\"fullName\":\"Test User\",\"password\":\"weak\"}"
                        },
                        "url": "{{baseUrl}}/register"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Register with Invalid CCCD', function () {",
                                    "    pm.response.to.have.status(400);",
                                    "    pm.expect(pm.response.json().error).to.include('CCCD must be 9 or 12 digits');",
                                    "});",
                                    "pm.test('Register with Invalid Phone', function () {",
                                    "    pm.sendRequest({",
                                    "        url: '{{baseUrl}}/register',",
                                    "        method: 'POST',",
                                    "        header: {'Content-Type': 'application/json'},",
                                    "        body: {",
                                    "            mode: 'raw',",
                                    "            raw: JSON.stringify({\"org\":\"Org3\",\"cccd\":\"123456789\",\"phone\":\"invalid\",\"fullName\":\"Test User\",\"password\":\"Password123!\"})",
                                    "        }",
                                    "    }, function (err, res) {",
                                    "            pm.expect(res).to.have.status(400);",
                                    "            pm.expect(res.json().error).to.include('Invalid Vietnamese phone number');",
                                    "    });",
                                    "});",
                                    "pm.test('Register with Weak Password', function () {",
                                    "    pm.sendRequest({",
                                    "        url: '{{baseUrl}}/register',",
                                    "        method: 'POST',",
                                    "        header: {",
                                    "            'Content-Type': 'application/json'",
                                    "        },",
                                    "        body: {",
                                    "            mode: 'raw',",
                                    "            raw: JSON.stringify({",
                                    "                \"org\": \"Org3\",",
                                    "                \"cccd\": \"123456789012\",",
                                    "                \"phone\": \"+84987654324\",",
                                    "                \"fullName\": \"Test User\",",
                                    "                \"password\": \"weak\"",
                                    "            })",
                                    "        }",
                                    "    }, function (err, res) {",
                                    "        pm.expect(res).to.have.status(400);",
                                    "        pm.expect(res.json().error).to.include('Password must be at least 8 characters long');",
                                    "    });",
                                    "});"
                                ]
                            },
                            "type": "text/javascript"
                        }
                    ]
                }
            ]
        },
        {
            "name": "Verify OTP",
            "description": "Verify OTP for registered users to complete registration.",
            "item": [
                {
                    "name": "Verify OTP UserOrg1_1",
                    "description": "Verify OTP for userOrg1_1 to complete registration.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"cccd\":\"{{org1_user_cccd}}\",\"otp\":\"123456\"}"
                        },
                        "url": "{{baseUrl}}/verify-otp"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Verify OTP UserOrg1_1 Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    pm.expect(pm.response.json().message).to.equal('User registered successfully');",
                                    "});",
                                    "pm.test('Verify OTP UserOrg1_1 Invalid OTP', function () {",
                                    "    pm.sendRequest({",
                                    "        url: '{{baseUrl}}/verify-otp',",
                                    "        method: 'POST',",
                                    "        header: {'Content-Type': 'application/json'},",
                                    "        body: {",
                                    "            mode: 'raw',",
                                    "            raw: JSON.stringify({\"cccd\": \"{{org1_user_cccd}}\",\"otp\":\"999999\"})",
                                    "        }",
                                    "    }, function (err, res) {",
                                    "        pm.expect(res).to.have.status(400);",
                                    "        pm.expect(res.json().error).to.equal('Invalid OTP');",
                                    "    });",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Verify OTP UserOrg2_1",
                    "description": "Verify OTP for userOrg2_1 to complete registration.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"cccd\":\"{{org2_user_cccd}}\",\"otp\":\"123456\"}"
                        },
                        "url": "{{baseUrl}}/verify-otp"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Verify OTP UserOrg2_1 Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    pm.expect(pm.response.json().message).to.equal('User registered successfully');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Verify OTP UserOrg3_1",
                    "description": "Verify OTP for userOrg3_1 to complete registration.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"cccd\":\"{{org3_user_cccd}}\",\"otp\":\"123456\"}"
                        },
                        "url": "{{baseUrl}}/verify-otp"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Verify OTP UserOrg3_1 Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    pm.expect(pm.response.json().message).to.equal('User registered successfully');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Login Users",
            "description": "Login users to obtain JWT tokens.",
            "item": [
                {
                    "name": "Login UserOrg1_1",
                    "description": "Login userOrg1_1 to obtain JWT token.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"cccd\":\"{{org1_user_cccd}}\",\"password\":\"Password123!\"}"
                        },
                        "url": "{{baseUrl}}/login"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Login UserOrg1_1 Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.equal('Login successful');",
                                    "    pm.expect(jsonData.token).to.exist;",
                                    "    pm.environment.set('org1_user_token', jsonData.token);",
                                    "});",
                                    "pm.test('Login UserOrg1_1 Invalid Password', function () {",
                                    "    pm.sendRequest({",
                                    "        url: '{{baseUrl}}/login',",
                                    "        method: 'POST',",
                                    "        header: {'Content-Type': 'application/json'},",
                                    "        body: {",
                                    "            mode: 'raw',",
                                    "            raw: JSON.stringify({\"cccd\":\"{{org1_user_cccd}}\",\"password\":\"WrongPassword!\"})",
                                    "        }",
                                    "    }, function (err, res) {",
                                    "        pm.expect(res).to.have.status(401);",
                                    "        pm.expect(res.json().error).to.equal('Invalid credentials');",
                                    "    });",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Login UserOrg2_1",
                    "description": "Login userOrg2_1 to obtain JWT token.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"cccd\":\"{{org2_user_cccd}}\",\"password\":\"Password123!\"}"
                        },
                        "url": "{{baseUrl}}/login"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Login UserOrg2_1 Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.equal('Login successful');",
                                    "    pm.expect(jsonData.token).to.exist;",
                                    "    pm.environment.set('org2_user_token', jsonData.token);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Login UserOrg3_1",
                    "description": "Login userOrg3_1 to obtain JWT token.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"cccd\":\"{{org3_user_cccd}}\",\"password\":\"Password123!\"}"
                        },
                        "url": "{{baseUrl}}/login"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Login UserOrg3_1 Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.equal('Login successful');",
                                    "    pm.expect(jsonData.token).to.exist;",
                                    "    pm.environment.set('org3_user_token', jsonData.token);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Land Parcels",
            "description": "Test land parcel operations (create, update, query).",
            "item": [
                {
                    "name": "Create Land Parcel (Org1)",
                    "description": "Create a land parcel by Org1 user.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" },
                            { "key": "Authorization", "value": "Bearer {{org1_user_token}}" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"id\":\"LP001\",\"ownerID\":\"456789123456\",\"location\":\"123 Tran Phu, Hanoi\",\"landUsePurpose\":\"Đất ở\",\"legalStatus\":\"Có giấy chứng nhận\",\"area\":100}"
                        },
                        "url": "{{baseUrl}}/land-parcels"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Create Land Parcel Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.equal('Land parcel created');",
                                    "    pm.expect(jsonData.landParcel.ID).to.equal('LP001');",
                                    "    pm.expect(jsonData.landParcel.OwnerID).to.equal('456789123456');",
                                    "    pm.expect(jsonData.landParcel.LandUsePurpose).to.equal('Đất ở');",
                                    "    pm.expect(jsonData.landParcel.LegalStatus).to.equal('Có giấy chứng nhận');",
                                    "    pm.expect(jsonData.landParcel.CreatedAt).to.match(/\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} \\+07:00/);",
                                    "    pm.environment.set('land_parcel_id', jsonData.landParcel.ID);",
                                    "});",
                                    "pm.test('Create Land Parcel Unauthorized (Org3)', function () {",
                                    "    pm.sendRequest({",
                                    "        url: '{{baseUrl}}/land-parcels',",
                                    "        method: 'POST',",
                                    "        header: {",
                                    "            'Content-Type': 'application/json',",
                                    "            'Authorization': 'Bearer {{org3_user_token}}'",
                                    "        },",
                                    "        body: {",
                                    "            mode: 'raw',",
                                    "            raw: JSON.stringify({\"id\":\"LP001\",\"ownerID\":\"456789123456\",\"location\":\"123 Tran Phu, Hanoi\",\"landUsePurpose\":\"Đất ở\",\"legalStatus\":\"Có giấy chứng nhận\",\"area\":100})",
                                    "        }",
                                    "    }, function (err, res) {",
                                    "        pm.expect(res).to.have.status(403);",
                                    "        pm.expect(res.json().error).to.include('Access denied, organization Org3 not allowed');",
                                    "    });",
                                    "});",
                                    "pm.test('Create Land Parcel Invalid Purpose', function () {",
                                    "    pm.sendRequest({",
                                    "        url: '{{baseUrl}}/land-parcels',",
                                    "        method: 'POST',",
                                    "        header: {",
                                    "            'Content-Type': 'application/json',",
                                    "            'Authorization': 'Bearer {{org1_user_token}}'",
                                    "        },",
                                    "        body: {",
                                    "            mode: 'raw',",
                                    "            raw: JSON.stringify({\"id\":\"LP002\",\"ownerID\":\"456789123456\",\"location\":\"123 Tran Phu, Hanoi\",\"landUsePurpose\":\"Invalid Purpose\",\"legalStatus\":\"Có giấy chứng nhận\",\"area\":100})",
                                    "        }",
                                    "    }, function (err, res) {",
                                    "        pm.expect(res).to.have.status(500);",
                                    "        pm.expect(res.json().error).to.include('Invalid land use purpose');",
                                    "    });",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Query Land Parcel by ID",
                    "description": "Query a land parcel by ID for Org1, Org2, and Org3 (with ownership check).",
                    "request": {
                        "method": "GET",
                        "header": [
                            { "key": "Authorization", "value": "Bearer {{org1_user_token}}" }
                        ],
                        "url": "{{baseUrl}}/land-parcels/{{land_parcel_id}}"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Query Land Parcel Success (Org1)', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.landParcel.ID).to.equal('LP001');",
                                    "    pm.expect(jsonData.landParcel.CreatedAt).to.match(/\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} \\+07:00/);",
                                    "});",
                                    "pm.test('Query Land Parcel Unauthorized Owner (Org3)', function () {",
                                    "    pm.sendRequest({",
                                    "        url: '{{baseUrl}}/land-parcels/{{land_parcel_id}}',",
                                    "        method: 'GET',",
                                    "        header: {",
                                    "            'Authorization': 'Bearer {{org3_user_token}}'",
                                    "        }",
                                    "    }, function (err, res) {",
                                    "        pm.expect(res).to.have.status(500);",
                                    "        pm.expect(res.json().error).to.include('Access denied');",
                                    "    });",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Documents",
            "description": "Test document operations (upload, verify, query).",
            "item": [
                {
                    "name": "Upload Document (Org3)",
                    "description": "Upload a document by Org3 user for a land parcel.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" },
                            { "key": "Authorization", "value": "Bearer {{org3_user_token}}" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"docID\":\"DOC001\",\"landParcelID\":\"LP001\",\"ipfsHash\":\"QmTestHash\",\"description\":\"Giấy chứng nhận quyền sử dụng đất\"}"
                        },
                        "url": "{{baseUrl}}/documents"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Upload Document Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.equal('Document uploaded');",
                                    "    pm.expect(jsonData.document.DocID).to.equal('DOC001');",
                                    "    pm.expect(jsonData.document.LandParcelID).to.equal('LP001');",
                                    "    pm.expect(jsonData.document.Description).to.equal('Giấy chứng nhận quyền sử dụng đất');",
                                    "    pm.environment.set('document_id', jsonData.document.DocID);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Verify Document (Org2)",
                    "description": "Verify a document by Org2 user.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" },
                            { "key": "Authorization", "value": "Bearer {{org2_user_token}}" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": "{{baseUrl}}/documents/{{document_id}}/verify"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Verify Document Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.equal('Document verified');",
                                    "    pm.expect(jsonData.document.Verified).to.be.true;",
                                    "});",
                                    "pm.test('Verify Document Unauthorized (Org3)', function () {",
                                    "    pm.sendRequest({",
                                    "        url: '{{baseUrl}}/documents/{{document_id}}/verify',",
                                    "        method: 'POST',",
                                    "        header: {",
                                    "            'Content-Type': 'application/json',",
                                    "            'Authorization': 'Bearer {{org3_user_token}}'",
                                    "        },",
                                    "        body: {",
                                    "            mode: 'raw',",
                                    "            raw: '{}'",
                                    "        }",
                                    "    }, function (err, res) {",
                                    "        pm.expect(res).to.have.status(403);",
                                    "        pm.expect(res.json().error).to.include('Access denied, organization Org3 not allowed');",
                                    "    });",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Transactions",
            "description": "Test transaction operations (transfer, process, approve).",
            "item": [
                {
                    "name": "Create Transfer Request (Org3)",
                    "description": "Create a transfer request by Org3 user.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" },
                            { "key": "Authorization", "value": "Bearer {{org3_user_token}}" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"txID\":\"TX001\",\"landParcelID\":\"LP001\",\"fromOwnerID\":\"456789123456\",\"toOwnerID\":\"987654321012\",\"details\":\"Transfer agreement\"}"
                        },
                        "url": "{{baseUrl}}/transfer-requests"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Create Transfer Request Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.equal('Transfer request created');",
                                    "    pm.expect(jsonData.transaction.TxID).to.equal('TX001');",
                                    "    pm.expect(jsonData.transaction.LandParcelID).to.equal('LP001');",
                                    "    pm.expect(jsonData.transaction.CreatedAt).to.match(/\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} \\+07:00/);",
                                    "    pm.environment.set('transaction_id', jsonData.transaction.TxID);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Process Transaction (Org2)",
                    "description": "Process a transaction by Org2 user, checking required documents.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" },
                            { "key": "Authorization", "value": "Bearer {{org2_user_token}}" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{}"
                        },
                        "url": "{{baseUrl}}/transactions/{{transaction_id}}/process"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Process Transaction Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.equal('Transaction processed');",
                                    "    pm.expect(jsonData.transaction.Status).to.equal('PROCESSING');",
                                    "});",
                                    "pm.test('Process Transaction Missing Documents', function () {",
                                    "    pm.sendRequest({",
                                    "        url: '{{baseUrl}}/transactions/TX002/process',",
                                    "        method: 'POST',",
                                    "        header: {",
                                    "            'Content-Type': 'application/json',",
                                    "            'Authorization': 'Bearer {{org2_user_token}}'",
                                    "        },",
                                    "        body: {",
                                    "            mode: 'raw',",
                                    "            raw: '{}'",
                                    "        }",
                                    "    }, function (err, res) {",
                                    "        pm.expect(res).to.have.status(500);",
                                    "        pm.expect(res.json().error).to.include('Missing required documents');",
                                    "    });",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                },
                {
                    "name": "Approve Transaction (Org1)",
                    "description": "Approve a transaction by Org1 user.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" },
                            { "key": "Authorization", "value": "Bearer {{org1_user_token}}" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"approveDetails\":\"Approved by authority\"}"
                        },
                        "url": "{{baseUrl}}/transactions/{{transaction_id}}/approve"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Approve Transaction Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.equal('Transaction approved');",
                                    "    pm.expect(jsonData.transaction.Status).to.equal('APPROVED');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "Certificates",
            "description": "Test certificate operations (issue, query).",
            "item": [
                {
                    "name": "Issue Certificate (Org1)",
                    "description": "Issue a land certificate by Org1 user.",
                    "request": {
                        "method": "POST",
                        "header": [
                            { "key": "Content-Type", "value": "application/json" },
                            { "key": "Authorization", "value": "Bearer {{org1_user_token}}" }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"certificateID\":\"CERT001\",\"landParcelID\":\"LP001\",\"ownerID\":\"456789123456\",\"legalInfo\":\"Valid ownership\"}"
                        },
                        "url": "{{baseUrl}}/certificates"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Issue Certificate Success', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.equal('Certificate issued');",
                                    "    pm.expect(jsonData.certificate.CertificateID).to.equal('CERT001');",
                                    "    pm.expect(jsonData.certificate.IssueDate).to.match(/\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2} \\+07:00/);",
                                    "    pm.environment.set('certificate_id', jsonData.certificate.CertificateID);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "variable": [
        { "key": "baseUrl", "value": "http://localhost:3000" },
        { "key": "org1_admin_token", "value": "" },
        { "key": "org2_admin_token", "value": "" },
        { "key": "org3_admin_token", "value": "" }
    ]
}