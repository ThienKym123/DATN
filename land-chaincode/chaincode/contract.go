package chaincode

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/hyperledger/fabric-contract-api-go/contractapi"
)

type LandRegistryChaincode struct {
	contractapi.Contract
}

// Init - H√†m kh·ªüi t·∫°o chaincode, t·ª± ƒë·ªông ch·∫°y khi deploy chaincode
func (s *LandRegistryChaincode) Init(ctx contractapi.TransactionContextInterface) error {
	fmt.Println("üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o Land Registry Chaincode...")

	// G·ªçi h√†m kh·ªüi t·∫°o d·ªØ li·ªáu tr·ª±c ti·∫øp (b·ªè qua ki·ªÉm tra t·ªï ch·ª©c)
	err := s.initLandDataInternal(ctx)
	if err != nil {
		fmt.Printf("‚ùå L·ªói khi kh·ªüi t·∫°o d·ªØ li·ªáu th·ª≠a ƒë·∫•t: %v\n", err)
		return fmt.Errorf("l·ªói kh·ªüi t·∫°o d·ªØ li·ªáu th·ª≠a ƒë·∫•t: %v", err)
	}

	fmt.Println("‚úÖ Kh·ªüi t·∫°o Land Registry Chaincode th√†nh c√¥ng!")
	return nil
}

// InitLandData - Kh·ªüi t·∫°o d·ªØ li·ªáu th·ª≠a ƒë·∫•t t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø (c√≥ ki·ªÉm tra quy·ªÅn)
func (s *LandRegistryChaincode) InitLandData(ctx contractapi.TransactionContextInterface) error {
	// Ch·ªâ cho ph√©p Org1MSP th·ª±c hi·ªán kh·ªüi t·∫°o
	if err := CheckOrganization(ctx, []string{"Org1MSP"}); err != nil {
		return err
	}

	return s.initLandDataInternal(ctx)
}

// initLandDataInternal - H√†m n·ªôi b·ªô kh·ªüi t·∫°o d·ªØ li·ªáu th·ª≠a ƒë·∫•t (kh√¥ng ki·ªÉm tra quy·ªÅn)
func (s *LandRegistryChaincode) initLandDataInternal(ctx contractapi.TransactionContextInterface) error {

	// L·∫•y timestamp
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// D·ªØ li·ªáu th·ª±c t·∫ø t·ª´ b·∫£n ƒë·ªì s·ªë
	landData := []struct {
		MapNumber   int
		PlotNumber  int
		OwnerName   string
		Area        float64
		LandPurpose string
		LegalArea   float64
		LegalStatus string
		Address     string
		OwnerCCCD   string
	}{
		{1, 2, "UBND x√£", 57.2, "BHK", 0, "", "", "001000000022"},
		{1, 3, "UBND x√£", 58.5, "BHK", 0, "", "", "001000000022"},
		{1, 4, "√îng: B√πi VƒÉn D·∫≠u", 193.1, "BHK", 193.1, "HNK", "ƒê·ªìng B√£i T·ªïng, x√£ ƒêan Ph∆∞·ª£ng, huy·ªán ƒêan Ph∆∞·ª£ng, th√†nh ph·ªë H√† N·ªôi", "001204037324"},
		{1, 5, "√îng: B√πi M·∫°nh Th·∫Øng", 135.0, "BHK", 135.0, "HNK", "ƒê·ªìng B√£i T·ªïng, x√£ ƒêan Ph∆∞·ª£ng, huy·ªán ƒêan Ph∆∞·ª£ng, th√†nh ph·ªë H√† N·ªôi", "001204037325"},
		{1, 27, "T·∫° Th·ªã Th∆°m", 143.1, "BHK", 143.1, "HNK", "ƒê·ªìng B√£i T·ªïng, x√£ ƒêan Ph∆∞·ª£ng, huy·ªán ƒêan Ph∆∞·ª£ng, th√†nh ph·ªë H√† N·ªôi", "001204037326"},
		{1, 28, "B√πi VƒÉn ƒê·ªá", 213.8, "BHK", 0, "", "", "001204037327"},
		{1, 29, "UBND x√£", 266.8, "DTL", 0, "", "", "001000000028"},
		{1, 57, "√îng: Nguy·ªÖn VƒÉn Minh", 800.2, "BHK", 800.2, "HNK", "ƒê·ªìng B√£i T·ªïng M√†u, x√£ ƒêan Ph∆∞·ª£ng, huy·ªán ƒêan Ph∆∞·ª£ng, th√†nh ph·ªë H√† N·ªôi", "001204037329"},
		{1, 58, "H·ªô √¥ng: Nguy·ªÖn H·ªØu H·ª£i", 1262.1, "BHK", 1262.1, "HNK", "ƒê·ªìng B√£i T·ªïng M√†u, x√£ ƒêan Ph∆∞·ª£ng, huy·ªán ƒêan Ph∆∞·ª£ng, th√†nh ph·ªë H√† N·ªôi", "001204037330"},
		{1, 165, "H·ªô b√†: Nguy·ªÖn Th·ªã Nhu", 402.5, "LUC", 402.5, "LUA", "ƒê·ªìng B√£i T·ªïng, x√£ ƒêan Ph∆∞·ª£ng, huy·ªán ƒêan Ph∆∞·ª£ng, th√†nh ph·ªë H√† N·ªôi", "001204037331"},
		{1, 201, "√îng: B√πi VƒÉn B√¨nh", 1268.2, "LUC", 1268.2, "LUA", "ƒê·ªìng Kh·ªï 7, x√£ ƒêan Ph∆∞·ª£ng, huy·ªán ƒêan Ph∆∞·ª£ng, th√†nh ph·ªë H√† N·ªôi", "001204037332"},
		{2, 374, "H·ªô √¥ng: Nguy·ªÖn H·ªØu Th·∫Øng", 239.2, "LUC", 239.2, "LUA", "ƒê·ªìng B√£i T·ªïng M√†u, x√£ ƒêan Ph∆∞·ª£ng, huy·ªán ƒêan Ph∆∞·ª£ng, th√†nh ph·ªë H√† N·ªôi", "001204037333"},
		{2, 430, "UBND x√£", 540.4, "DTL", 0, "", "", "001000000034"},
		{3, 37, "H·ªô b√†: Nguy·ªÖn Th·ªã Y·∫øn", 296.0, "LUC", 296.0, "LUA", "B√£i T·ªïng m√†u, x√£ ƒêan Ph∆∞·ª£ng, huy·ªán ƒêan Ph∆∞·ª£ng, th√†nh ph·ªë H√† N·ªôi", "001204037335"},
		{3, 84, "UBND x√£", 1362.7, "DTL", 0, "", "", "001000000036"},
		{4, 30, "UBND x√£", 1993.9, "DGT", 0, "", "", "001000000037"},
		{5, 153, "B√πi M·∫°nh H∆∞ng", 539.7, "LUC", 0, "", "", "001204037338"},
		{6, 71, "UBND x√£", 7070.2, "DGT", 0, "", "", "001000000039"},
		{6, 76, "Nguy·ªÖn Xu√¢n Thu·ª∑", 1955.0, "LNQ", 0, "", "ƒê·ªìng R·∫±m, x√£ ƒêan Ph∆∞·ª£ng, huy·ªán ƒêan Ph∆∞·ª£ng, th√†nh ph·ªë H√† N·ªôi", "001204037340"},
		{7, 27, "H·ªô √¥ng: Nguy·ªÖn H·ªØu S√¥ng", 511.2, "LNQ", 0, "", "", "001204037341"},
		{7, 49, "√îng: Nguy·ªÖn Xu√¢n Tr∆∞·ªùng", 314.0, "LUC", 314.0, "LUA", "", "001204037342"},
		{8, 83, "√îng: Chu VƒÉn C√°t", 626.0, "LUC", 626.0, "LUA", "", "001204037343"},
		{8, 89, "H·ªô √¥ng: Nguy·ªÖn ƒêƒÉng S∆°n", 406.0, "LUC", 406.0, "LUA", "", "001204037344"},
		{9, 23, "√îng: Nguy·ªÖn ƒêƒÉng Th∆∞", 580.0, "LUC", 580.0, "LUA", "", "001204037345"},
		{10, 15, "Nguy·ªÖn H·ªØu Th·∫Øng", 125.2, "ONT", 0, "", "", "001204037346"},
		{10, 21, "Cty CPXK th·ª±c ph·∫©m", 17929.2, "SKC", 0, "", "", "001204037347"},
		{10, 45, "C√¥ng ty TNHH Minh Ph√°t", 10004.2, "SKC", 0, "", "", "001204037348"},
		{11, 3, "H·ª£p T√°c X√£", 1200.0, "LNQ", 0, "", "", "001204037349"},
		{11, 45, "Nguy·ªÖn VƒÉn H·ªØu", 2077.0, "SKC", 0, "", "", "001204037350"},
		{11, 48, "H·ªô √¥ng: B√πi VƒÉn N·ªü", 80.2, "ONT", 80.2, "ONT*", "", "001204037352"},
		{11, 68, "B√†: Tr·∫ßn Th·ªã B·∫°ch Tuy·∫øt", 2302.1, "BHK", 2302.1, "HNK", "", "001204037353"},
		{12, 70, "B√†: B√πi Th·ªã L·ª£i", 115.7, "ONT", 115.7, "ONT*", "", "001204037354"},
		{12, 93, "Nguy·ªÖn M·∫°nh Kim", 1371.0, "LNQ", 0, "", "", "001204037355"},
		{13, 343, "H·ªô √¥ng: Ph·∫°m Minh Th·∫Øng", 804.9, "BHK", 804.9, "HNK", "", "001204037356"},
		{14, 116, "H·ªô √¥ng: Chu VƒÉn H√®", 374.9, "LUC", 374.9, "LUA", "", "001204037357"},
		{14, 453, "√îng: Chu VƒÉn Vi·ªát", 597.8, "LUC", 597.8, "LUA", "", "001204037358"},
		{15, 81, "Ph·∫°m VƒÉn Chung", 250.9, "LUC", 0, "", "", "001204037359"},
		{15, 437, "Nguy·ªÖn VƒÉn Chi·∫øn", 74.1, "SKC", 0, "", "", "001204037360"},
		{16, 56, "B√πi Th·ªã Nh√¢m", 83.4, "SKC", 0, "", "", "001204037361"},
		{17, 7, "Nguy·ªÖn VƒÉn T∆∞·ªõc", 1139.6, "LNQ", 0, "", "", "001204037362"},
		{18, 8, "√îng: Nguy·ªÖn VƒÉn Li√™n", 606.5, "LUC", 606.5, "", "", "001204037363"},
		{18, 18, "B√†: B√πi Th·ªã Lan", 663.5, "LUC", 663.5, "LUA", "", "001204037364"},
		{19, 8, "√îng: B√πi Vinh Vi·∫øt", 1862.5, "LUC", 1862.5, "LUA", "", "001204037365"},
		{19, 26, "H·ªô √¥ng: T·∫° ƒêƒÉng B√¨nh", 90.0, "ONT", 90.0, "ONT*", "", "001204037367"},
		{19, 280, "B√†: T·∫° Th·ªã ƒê·∫≠m", 500.2, "LNQ", 500.2, "CLN", "", "001204037368"},
		{20, 18, "H·ªô √¥ng: Nguy·ªÖn VƒÉn Qu·∫£ng", 108.8, "ONT", 108.8, "ONT*", "", "001204037369"},
		{20, 56, "H·ªô √¥ng: Nguy·ªÖn H·ªØu B√°ch", 106.7, "ONT", 106.7, "ONT*", "", "001204037370"},
		{20, 105, "√îng: Nguy·ªÖn Ki·∫øn Th·ª©c", 203.8, "ONT", 203.8, "ONT*", "", "001204037371"},
		{20, 177, "√îng: Nguy·ªÖn VƒÉn Do√£n", 89.0, "ONT", 89.0, "ONT*", "", "001204037372"},
		{21, 70, "H·ªô b√†: Nguy·ªÖn Th·ªã Y·∫øn", 153.0, "ONT", 153.0, "ONT*", "", "001204037373"},
		{21, 85, "B√†: Nguy·ªÖn Th·ªã Thanh", 362.9, "LUC", 362.9, "LUA", "", "001204037374"},
		{21, 198, "H·ªô √¥ng: Ng√¥ VƒÉn √≠ch", 364.5, "ONT", 364.5, "ONT*", "", "001204037375"},
		{22, 47, "B√†: B√πi Th·ªã NƒÉm", 384.1, "LUC", 384.1, "LUA", "", "001204037376"},
		{23, 5, "Cty CP X√¢y D·ª±ng S·ªë 1", 22047.6, "SKC", 0, "", "", "001204037377"},
		{23, 13, "Cty CNHH Gia Nh·∫•t", 5018.3, "SKC", 0, "", "", "001204037378"},
	}

	var successCount, errorCount int

	for _, data := range landData {
		// T·∫°o LandID b·∫±ng c√°ch k·∫øt h·ª£p mapNumber v√† plotNumber
		landID := fmt.Sprintf("%d-%d", data.MapNumber, data.PlotNumber)

		// Ki·ªÉm tra xem th·ª≠a ƒë·∫•t ƒë√£ t·ªìn t·∫°i ch∆∞a
		exists, err := CheckLandExists(ctx, landID)
		if err != nil {
			fmt.Printf("L·ªói khi ki·ªÉm tra th·ª≠a ƒë·∫•t %s: %v\n", landID, err)
			errorCount++
			continue
		}
		if exists {
			fmt.Printf("Th·ª≠a ƒë·∫•t %s ƒë√£ t·ªìn t·∫°i, b·ªè qua\n", landID)
			continue
		}

		// X√°c ƒë·ªãnh ƒë·ªãa ch·ªâ
		location := data.Address
		if location == "" {
			location = "X√£ ƒêan Ph∆∞·ª£ng, huy·ªán ƒêan Ph∆∞·ª£ng, th√†nh ph·ªë H√† N·ªôi"
		}

		// T·∫°o th·ª≠a ƒë·∫•t m·ªõi
		land := Land{
			ID:             landID,
			OwnerID:        data.OwnerCCCD,
			Area:           data.Area,
			Location:       location,
			LandUsePurpose: data.LandPurpose,
			LegalStatus:    data.LegalStatus,
			CertificateID:  "",
			LegalInfo:      "",
			DocumentIDs:    []string{},
			CreatedAt:      txTime,
			UpdatedAt:      txTime,
		}

		// Validate th·ª≠a ƒë·∫•t
		if err := ValidateLand(ctx, land, false); err != nil {
			fmt.Printf("Th·ª≠a ƒë·∫•t %s kh√¥ng h·ª£p l·ªá: %v\n", landID, err)
			errorCount++
			continue
		}

		// L∆∞u th·ª≠a ƒë·∫•t
		landJSON, err := json.Marshal(land)
		if err != nil {
			fmt.Printf("L·ªói khi m√£ h√≥a th·ª≠a ƒë·∫•t %s: %v\n", landID, err)
			errorCount++
			continue
		}

		if err := ctx.GetStub().PutState(landID, landJSON); err != nil {
			fmt.Printf("L·ªói khi l∆∞u th·ª≠a ƒë·∫•t %s: %v\n", landID, err)
			errorCount++
			continue
		}

		successCount++
		fmt.Printf("‚úÖ ƒê√£ t·∫°o th·ª≠a ƒë·∫•t %s cho %s\n", landID, data.OwnerName)
	}

	// Ghi log k·∫øt qu·∫£
	result := fmt.Sprintf("Kh·ªüi t·∫°o ho√†n th√†nh: %d th√†nh c√¥ng, %d l·ªói", successCount, errorCount)
	fmt.Println(result)

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "INIT_LAND_DATA", "SYSTEM", result)
}

// ========================================
// LAND PARCEL MANAGEMENT FUNCTIONS
// ========================================

// CreateLandParcel - T·∫°o th·ª≠a ƒë·∫•t m·ªõi
func (s *LandRegistryChaincode) CreateLandParcel(ctx contractapi.TransactionContextInterface, id, ownerID, location, landUsePurpose, legalStatus, area, certificateID, legalInfo string, userID string) error {
	if err := CheckOrganization(ctx, []string{"Org1MSP"}); err != nil {
		return err
	}
	areaFloat, err := parseFloat(area)
	if err != nil {
		return fmt.Errorf("l·ªói khi chuy·ªÉn ƒë·ªïi di·ªán t√≠ch: %v", err)
	}
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// Validate certificate information - khi c√≥ tr·∫°ng th√°i ph√°p l√Ω th√¨ ph·∫£i c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin GCN
	// Tr·ª´ c√°c tr·∫°ng th√°i ƒë·∫∑c bi·ªát: "", "ƒêang tranh ch·∫•p", "ƒêang th·∫ø ch·∫•p"
	if legalStatus != "" && legalStatus != "ƒêang tranh ch·∫•p" && legalStatus != "ƒêang th·∫ø ch·∫•p" {
		if certificateID == "" || legalInfo == "" {
			return fmt.Errorf("khi c√≥ tr·∫°ng th√°i ph√°p l√Ω '%s', certificateID v√† legalInfo l√† b·∫Øt bu·ªôc", legalStatus)
		}
	}

	land := Land{
		ID:             id,
		OwnerID:        ownerID,
		Area:           areaFloat,
		Location:       location,
		LandUsePurpose: landUsePurpose,
		LegalStatus:    legalStatus,
		CertificateID:  certificateID,
		DocumentIDs:    []string{},
		CreatedAt:      txTime,
		UpdatedAt:      txTime,
	}

	// Set IssueDate and LegalInfo khi c√≥ tr·∫°ng th√°i ph√°p l√Ω ho·∫∑c certificateID
	// Tr·ª´ c√°c tr·∫°ng th√°i ƒë·∫∑c bi·ªát: "", "ƒêang tranh ch·∫•p", "ƒêang th·∫ø ch·∫•p"
	if legalStatus != "" && legalStatus != "ƒêang tranh ch·∫•p" && legalStatus != "ƒêang th·∫ø ch·∫•p" {
		land.IssueDate = txTime
		land.LegalInfo = legalInfo
	} else if certificateID != "" {
		// Fallback: n·∫øu c√≥ certificateID nh∆∞ng kh√¥ng c√≥ tr·∫°ng th√°i ph√°p l√Ω
		land.IssueDate = txTime
		land.LegalInfo = legalInfo
	}
	if err := ValidateLand(ctx, land, false); err != nil {
		return err
	}
	landJSON, err := json.Marshal(land)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a th·ª≠a ƒë·∫•t: %v", err)
	}
	if err := ctx.GetStub().PutState(id, landJSON); err != nil {
		return fmt.Errorf("l·ªói khi l∆∞u th·ª≠a ƒë·∫•t: %v", err)
	}
	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "CREATE_LAND_PARCEL", userID, fmt.Sprintf("T·∫°o th·ª≠a ƒë·∫•t %s", id))
}

// UpdateLandParcel - C·∫≠p nh·∫≠t th√¥ng tin th·ª≠a ƒë·∫•t
func (s *LandRegistryChaincode) UpdateLandParcel(ctx contractapi.TransactionContextInterface, id, area, location, landUsePurpose, legalStatus, certificateID, legalInfo string) error {
	if err := CheckOrganization(ctx, []string{"Org1MSP"}); err != nil {
		return err
	}
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	existingLand, err := s.QueryLandByID(ctx, id)
	if err != nil {
		return fmt.Errorf("l·ªói khi truy v·∫•n th·ª≠a ƒë·∫•t %s: %v", id, err)
	}
	if err := VerifyLandLegalStatus(ctx, id, []string{"ƒêang tranh ch·∫•p", "ƒêang th·∫ø ch·∫•p"}); err != nil {
		return err
	}
	areaFloat, err := parseFloat(area)
	if err != nil {
		return fmt.Errorf("l·ªói khi chuy·ªÉn ƒë·ªïi di·ªán t√≠ch: %v", err)
	}
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// Validate certificate information - khi c√≥ tr·∫°ng th√°i ph√°p l√Ω th√¨ ph·∫£i c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin GCN
	// Tr·ª´ c√°c tr·∫°ng th√°i ƒë·∫∑c bi·ªát: "", "ƒêang tranh ch·∫•p", "ƒêang th·∫ø ch·∫•p"
	if legalStatus != "" && legalStatus != "ƒêang tranh ch·∫•p" && legalStatus != "ƒêang th·∫ø ch·∫•p" {
		if certificateID == "" || legalInfo == "" {
			return fmt.Errorf("khi c√≥ tr·∫°ng th√°i ph√°p l√Ω '%s', certificateID v√† legalInfo l√† b·∫Øt bu·ªôc", legalStatus)
		}
	}

	updatedLand := Land{
		ID:             id,
		OwnerID:        existingLand.OwnerID,
		Area:           areaFloat,
		Location:       location,
		LandUsePurpose: landUsePurpose,
		LegalStatus:    legalStatus,
		DocumentIDs:    existingLand.DocumentIDs,
		CreatedAt:      existingLand.CreatedAt,
		UpdatedAt:      txTime,
	}

	// Handle certificate information updates
	// Tr·ª´ c√°c tr·∫°ng th√°i ƒë·∫∑c bi·ªát: "", "ƒêang tranh ch·∫•p", "ƒêang th·∫ø ch·∫•p"
	if legalStatus != "" && legalStatus != "ƒêang tranh ch·∫•p" && legalStatus != "ƒêang th·∫ø ch·∫•p" {
		// Khi c√≥ tr·∫°ng th√°i ph√°p l√Ω, ph·∫£i c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin GCN
		updatedLand.CertificateID = certificateID
		updatedLand.LegalInfo = legalInfo
		updatedLand.IssueDate = txTime
	} else if certificateID != "" {
		// Fallback: n·∫øu c√≥ certificateID nh∆∞ng kh√¥ng c√≥ tr·∫°ng th√°i ph√°p l√Ω
		updatedLand.CertificateID = certificateID
		updatedLand.LegalInfo = legalInfo
		updatedLand.IssueDate = txTime
	} else {
		// Gi·ªØ nguy√™n th√¥ng tin GCN c≈©
		updatedLand.CertificateID = existingLand.CertificateID
		updatedLand.LegalInfo = existingLand.LegalInfo
		updatedLand.IssueDate = existingLand.IssueDate
	}
	if err := ValidateLand(ctx, updatedLand, true); err != nil {
		return err
	}
	landJSON, err := json.Marshal(updatedLand)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a th·ª≠a ƒë·∫•t: %v", err)
	}
	if err := ctx.GetStub().PutState(id, landJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t th·ª≠a ƒë·∫•t: %v", err)
	}
	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "UPDATE_LAND_PARCEL", userID, fmt.Sprintf("C·∫≠p nh·∫≠t th·ª≠a ƒë·∫•t %s", id))
}

// IssueLandCertificate - H√†m n√†y ƒë√£ b·ªã x√≥a v√¨ kh√¥ng c√≤n c·∫ßn thi·∫øt
// Gi·∫•y ch·ª©ng nh·∫≠n v√† th√¥ng tin ph√°p l√Ω gi·ªù ƒë∆∞·ª£c x·ª≠ l√Ω tr·ª±c ti·∫øp trong CreateLandParcel v√† UpdateLandParcel

// ========================================
// DOCUMENT MANAGEMENT FUNCTIONS
// ========================================

// CreateDocument - T·∫°o t√†i li·ªáu m·ªõi
func (s *LandRegistryChaincode) CreateDocument(ctx contractapi.TransactionContextInterface, docID, docType, title, description, ipfsHash, fileType string, fileSize int64, status string, verifiedBy string) error {
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}

	// Validate lo·∫°i t√†i li·ªáu
	if err := ValidateDocumentType(docType); err != nil {
		return fmt.Errorf("lo·∫°i t√†i li·ªáu kh√¥ng h·ª£p l·ªá: %v", err)
	}

	// Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa IPFS hash
	if err := ValidateIPFSHash(ipfsHash); err != nil {
		return fmt.Errorf("hash IPFS kh√¥ng h·ª£p l·ªá: %v", err)
	}

	// Ki·ªÉm tra xem t√†i li·ªáu ƒë√£ t·ªìn t·∫°i ch∆∞a
	existingDoc, err := s.GetDocument(ctx, docID)
	if err == nil && existingDoc != nil {
		return fmt.Errorf("t√†i li·ªáu %s ƒë√£ t·ªìn t·∫°i", docID)
	}

	// L·∫•y timestamp
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// Validate tr·∫°ng th√°i t√†i li·ªáu
	if !IsValidDocumentStatus(status) {
		return fmt.Errorf("tr·∫°ng th√°i t√†i li·ªáu kh√¥ng h·ª£p l·ªá: %s", status)
	}

	// T·∫°o t√†i li·ªáu m·ªõi
	doc := &Document{
		DocID:       docID,
		Type:        docType,
		Title:       title,
		Description: description,
		IPFSHash:    ipfsHash,
		FileSize:    fileSize,
		FileType:    fileType,
		UploadedBy:  userID,
		Status:      status,
		VerifiedBy:  verifiedBy,
		CreatedAt:   txTime,
		UpdatedAt:   txTime,
	}

	// Set verified time if verified
	if status == "VERIFIED" {
		doc.VerifiedAt = txTime
	}

	// L∆∞u t√†i li·ªáu
	docJSON, err := json.Marshal(doc)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a t√†i li·ªáu: %v", err)
	}
	if err := ctx.GetStub().PutState(docID, docJSON); err != nil {
		return fmt.Errorf("l·ªói khi l∆∞u t√†i li·ªáu: %v", err)
	}

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "CREATE_DOCUMENT", userID, fmt.Sprintf("T·∫°o t√†i li·ªáu %s", title))
}

// UpdateDocument - C·∫≠p nh·∫≠t th√¥ng tin t√†i li·ªáu
func (s *LandRegistryChaincode) UpdateDocument(ctx contractapi.TransactionContextInterface, docID, title, description string) error {
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}

	// L·∫•y t√†i li·ªáu hi·ªán t·∫°i
	doc, err := s.GetDocument(ctx, docID)
	if err != nil {
		return err
	}

	// Ki·ªÉm tra quy·ªÅn ch·ªânh s·ª≠a - ai upload th√¨ m·ªõi ƒë∆∞·ª£c thao t√°c
	if doc.UploadedBy != userID {
		return fmt.Errorf("ng∆∞·ªùi d√πng %s kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a t√†i li·ªáu %s", userID, docID)
	}

	// L·∫•y timestamp
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// C·∫≠p nh·∫≠t th√¥ng tin
	doc.Title = title
	doc.Description = description
	doc.UpdatedAt = txTime

	// L∆∞u t√†i li·ªáu
	docJSON, err := json.Marshal(doc)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a t√†i li·ªáu: %v", err)
	}
	if err := ctx.GetStub().PutState(docID, docJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t t√†i li·ªáu: %v", err)
	}

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "UPDATE_DOCUMENT", userID, fmt.Sprintf("C·∫≠p nh·∫≠t t√†i li·ªáu %s", docID))
}

// DeleteDocument - X√≥a t√†i li·ªáu
func (s *LandRegistryChaincode) DeleteDocument(ctx contractapi.TransactionContextInterface, docID string) error {
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}

	// L·∫•y t√†i li·ªáu hi·ªán t·∫°i
	doc, err := s.GetDocument(ctx, docID)
	if err != nil {
		return err
	}

	// Ki·ªÉm tra quy·ªÅn x√≥a - ai upload th√¨ m·ªõi ƒë∆∞·ª£c thao t√°c
	if doc.UploadedBy != userID {
		return fmt.Errorf("ng∆∞·ªùi d√πng %s kh√¥ng c√≥ quy·ªÅn x√≥a t√†i li·ªáu %s", userID, docID)
	}

	// X√≥a t√†i li·ªáu
	if err := ctx.GetStub().DelState(docID); err != nil {
		return fmt.Errorf("l·ªói khi x√≥a t√†i li·ªáu: %v", err)
	}

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "DELETE_DOCUMENT", userID, fmt.Sprintf("X√≥a t√†i li·ªáu %s", docID))
}

// VerifyDocument - Ch·ª©ng th·ª±c t√†i li·ªáu (ch·ªâ Org2)
func (s *LandRegistryChaincode) VerifyDocument(ctx contractapi.TransactionContextInterface, docID string) error {
	// Ch·ªâ Org2 m·ªõi ƒë∆∞·ª£c ch·ª©ng th·ª±c t√†i li·ªáu
	if err := CheckOrganization(ctx, []string{"Org2MSP"}); err != nil {
		return err
	}

	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}

	// L·∫•y t√†i li·ªáu
	doc, err := s.GetDocument(ctx, docID)
	if err != nil {
		return err
	}

	// Ki·ªÉm tra xem t√†i li·ªáu c√≥ th·ªÉ ƒë∆∞·ª£c x√°c th·ª±c kh√¥ng
	if !CanVerifyDocument(doc) {
		return fmt.Errorf("t√†i li·ªáu %s kh√¥ng th·ªÉ ƒë∆∞·ª£c x√°c th·ª±c (tr·∫°ng th√°i: %s)", docID, doc.Status)
	}

	// L·∫•y timestamp
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// Ch·ª©ng th·ª±c t√†i li·ªáu
	SetDocumentVerified(doc, userID, txTime)

	// L∆∞u t√†i li·ªáu
	docJSON, err := json.Marshal(doc)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a t√†i li·ªáu: %v", err)
	}
	if err := ctx.GetStub().PutState(docID, docJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t t√†i li·ªáu: %v", err)
	}

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "VERIFY_DOCUMENT", userID, fmt.Sprintf("Ch·ª©ng th·ª±c t√†i li·ªáu %s", docID))
}

// RejectDocument - T·ª´ ch·ªëi t√†i li·ªáu (ch·ªâ Org2)
func (s *LandRegistryChaincode) RejectDocument(ctx contractapi.TransactionContextInterface, docID, reason string) error {
	// Ch·ªâ Org2 m·ªõi ƒë∆∞·ª£c t·ª´ ch·ªëi t√†i li·ªáu
	if err := CheckOrganization(ctx, []string{"Org2MSP"}); err != nil {
		return err
	}

	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}

	// L·∫•y t√†i li·ªáu
	doc, err := s.GetDocument(ctx, docID)
	if err != nil {
		return err
	}

	// L·∫•y timestamp
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// Ki·ªÉm tra xem t√†i li·ªáu c√≥ th·ªÉ b·ªã t·ª´ ch·ªëi kh√¥ng
	if !CanRejectDocument(doc) {
		return fmt.Errorf("t√†i li·ªáu %s kh√¥ng th·ªÉ b·ªã t·ª´ ch·ªëi (tr·∫°ng th√°i: %s)", docID, doc.Status)
	}

	// T·ª´ ch·ªëi t√†i li·ªáu
	SetDocumentRejected(doc, userID, txTime)
	
	// L∆∞u th√¥ng tin t·ª´ ch·ªëi v√†o Description v·ªõi format chu·∫©n ƒë·ªÉ d·ªÖ nh·∫≠n bi·∫øt
	rejectionInfo := fmt.Sprintf(" [REJECTED: %s | By: %s | At: %s]", reason, userID, txTime.Format("2006-01-02 15:04:05"))
	doc.Description = doc.Description + rejectionInfo

	// L∆∞u t√†i li·ªáu
	docJSON, err := json.Marshal(doc)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a t√†i li·ªáu: %v", err)
	}
	if err := ctx.GetStub().PutState(docID, docJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t t√†i li·ªáu: %v", err)
	}

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "REJECT_DOCUMENT", userID, fmt.Sprintf("T·ª´ ch·ªëi t√†i li·ªáu %s: %s", docID, reason))
}

// LinkDocumentToLand - Link existing documents to land parcel after verification (supports multiple documents)
func (s *LandRegistryChaincode) LinkDocumentToLand(ctx contractapi.TransactionContextInterface, docIDs, landParcelID string) error {
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}

	// Ch·ªâ cho ph√©p Org1 li√™n k·∫øt t√†i li·ªáu v·ªõi th·ª≠a ƒë·∫•t
	if err := CheckOrganization(ctx, []string{"Org1MSP"}); err != nil {
		return err
	}

	// Parse docIDs string th√†nh slice
	var docIDList []string
	if err := json.Unmarshal([]byte(docIDs), &docIDList); err != nil {
		// Fallback: n·∫øu kh√¥ng ph·∫£i JSON array, coi nh∆∞ single docID
		docIDList = []string{docIDs}
	}

	if len(docIDList) == 0 {
		return fmt.Errorf("kh√¥ng c√≥ t√†i li·ªáu n√†o ƒë·ªÉ li√™n k·∫øt")
	}

	// Ki·ªÉm tra th·ª≠a ƒë·∫•t t·ªìn t·∫°i
	land, err := s.QueryLandByID(ctx, landParcelID)
	if err != nil {
		return fmt.Errorf("l·ªói khi truy v·∫•n th·ª≠a ƒë·∫•t %s: %v", landParcelID, err)
	}

	var linkedDocs []string
	var errors []string

	// X·ª≠ l√Ω t·ª´ng t√†i li·ªáu
	for _, docID := range docIDList {
		// Ki·ªÉm tra t√†i li·ªáu t·ªìn t·∫°i
		doc, err := s.GetDocument(ctx, docID)
		if err != nil {
			errors = append(errors, fmt.Sprintf("kh√¥ng t√¨m th·∫•y t√†i li·ªáu %s: %v", docID, err))
			continue
		}

		// Ki·ªÉm tra t√†i li·ªáu ƒë√£ ƒë∆∞·ª£c verify ch∆∞a (ch·ªâ verified documents m·ªõi ƒë∆∞·ª£c link)
		if !IsDocumentVerified(doc) {
			errors = append(errors, fmt.Sprintf("t√†i li·ªáu %s ch∆∞a ƒë∆∞·ª£c x√°c minh, kh√¥ng th·ªÉ link", docID))
			continue
		}

		// Ki·ªÉm tra xem document ƒë√£ ƒë∆∞·ª£c link ch∆∞a
		alreadyLinked := false
		for _, existingDocID := range land.DocumentIDs {
			if existingDocID == docID {
				errors = append(errors, fmt.Sprintf("t√†i li·ªáu %s ƒë√£ ƒë∆∞·ª£c link v·ªõi th·ª≠a ƒë·∫•t %s", docID, landParcelID))
				alreadyLinked = true
				break
			}
		}

		if !alreadyLinked {
			land.DocumentIDs = append(land.DocumentIDs, docID)
			linkedDocs = append(linkedDocs, doc.Title)
		}
	}

	// N·∫øu kh√¥ng c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c link th√†nh c√¥ng
	if len(linkedDocs) == 0 {
		return fmt.Errorf("kh√¥ng c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c li√™n k·∫øt th√†nh c√¥ng. L·ªói: %v", errors)
	}

	// L·∫•y timestamp
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// C·∫≠p nh·∫≠t th·ª≠a ƒë·∫•t
	land.UpdatedAt = txTime

	landJSON, err := json.Marshal(land)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a th·ª≠a ƒë·∫•t: %v", err)
	}
	if err := ctx.GetStub().PutState(landParcelID, landJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t th·ª≠a ƒë·∫•t: %v", err)
	}

	// Ghi log
	logMessage := fmt.Sprintf("Link %d t√†i li·ªáu b·ªï sung (%v) v·ªõi th·ª≠a ƒë·∫•t %s", len(linkedDocs), linkedDocs, landParcelID)
	if len(errors) > 0 {
		logMessage += fmt.Sprintf(". M·ªôt s·ªë l·ªói: %v", errors)
	}

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "LINK_DOCUMENTS_TO_LAND", userID, logMessage)
}

// LinkDocumentToTransaction - Link existing documents to transaction (supports multiple documents)
func (s *LandRegistryChaincode) LinkDocumentToTransaction(ctx contractapi.TransactionContextInterface, docIDs, transactionID string) error {
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	mspID, err := GetCallerOrgMSP(ctx)
	if err != nil {
		return err
	}

	// Ch·ªâ cho ph√©p Org3 li√™n k·∫øt t√†i li·ªáu v·ªõi giao d·ªãch
	if err := CheckOrganization(ctx, []string{"Org3MSP"}); err != nil {
		return err
	}

	// Parse docIDs string th√†nh slice
	var docIDList []string
	if err := json.Unmarshal([]byte(docIDs), &docIDList); err != nil {
		// Fallback: n·∫øu kh√¥ng ph·∫£i JSON array, coi nh∆∞ single docID
		docIDList = []string{docIDs}
	}

	if len(docIDList) == 0 {
		return fmt.Errorf("kh√¥ng c√≥ t√†i li·ªáu n√†o ƒë·ªÉ li√™n k·∫øt")
	}

	// Ki·ªÉm tra giao d·ªãch t·ªìn t·∫°i v√† quy·ªÅn truy c·∫≠p
	tx, err := GetTransaction(ctx, transactionID)
	if err != nil {
		return fmt.Errorf("l·ªói khi truy v·∫•n giao d·ªãch %s: %v", transactionID, err)
	}

	// Ki·ªÉm tra quy·ªÅn truy c·∫≠p giao d·ªãch cho Org3
	if mspID == "Org3MSP" {
		if tx.FromOwnerID != userID && tx.ToOwnerID != userID {
			return fmt.Errorf("ng∆∞·ªùi d√πng %s kh√¥ng c√≥ quy·ªÅn truy c·∫≠p giao d·ªãch %s", userID, transactionID)
		}
	}

	// Ki·ªÉm tra giao d·ªãch c√≥ ·ªü tr·∫°ng th√°i SUPPLEMENT_REQUESTED kh√¥ng (theo UC-18 c·∫ßn y√™u c·∫ßu b·ªï sung t·ª´ Org2)
	if tx.Status != "SUPPLEMENT_REQUESTED" {
		return fmt.Errorf("ch·ªâ c√≥ th·ªÉ li√™n k·∫øt t√†i li·ªáu b·ªï sung khi giao d·ªãch ·ªü tr·∫°ng th√°i y√™u c·∫ßu b·ªï sung")
	}

	var linkedDocs []string
	var errors []string

	// X·ª≠ l√Ω t·ª´ng t√†i li·ªáu
	for _, docID := range docIDList {
		// Ki·ªÉm tra t√†i li·ªáu t·ªìn t·∫°i
		doc, err := s.GetDocument(ctx, docID)
		if err != nil {
			errors = append(errors, fmt.Sprintf("kh√¥ng t√¨m th·∫•y t√†i li·ªáu %s: %v", docID, err))
			continue
		}

		// Ki·ªÉm tra quy·ªÅn: ch·ªâ owner (ng∆∞·ªùi upload) c√≥ th·ªÉ link document
		if mspID == "Org3MSP" && doc.UploadedBy != userID {
			errors = append(errors, fmt.Sprintf("b·∫°n ch·ªâ c√≥ th·ªÉ link t√†i li·ªáu c·ªßa m√¨nh. T√†i li·ªáu %s kh√¥ng thu·ªôc s·ªü h·ªØu", docID))
			continue
		}

		// Ki·ªÉm tra xem document ƒë√£ ƒë∆∞·ª£c link ch∆∞a
		alreadyLinked := false
		for _, existingDocID := range tx.DocumentIDs {
			if existingDocID == docID {
				errors = append(errors, fmt.Sprintf("t√†i li·ªáu %s ƒë√£ ƒë∆∞·ª£c link v·ªõi giao d·ªãch %s", docID, transactionID))
				alreadyLinked = true
				break
			}
		}

		if !alreadyLinked {
			tx.DocumentIDs = append(tx.DocumentIDs, docID)
			linkedDocs = append(linkedDocs, doc.Title)
		}
	}

	// N·∫øu kh√¥ng c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c link th√†nh c√¥ng
	if len(linkedDocs) == 0 {
		return fmt.Errorf("kh√¥ng c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c li√™n k·∫øt th√†nh c√¥ng. L·ªói: %v", errors)
	}

	// L·∫•y timestamp
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// C·∫≠p nh·∫≠t giao d·ªãch - ƒë·∫∑t l·∫°i status v·ªÅ PENDING ƒë·ªÉ Org2 x·ª≠ l√Ω l·∫°i
	tx.UpdatedAt = txTime
	tx.Status = "PENDING"

	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(transactionID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t giao d·ªãch: %v", err)
	}

	// Ghi log
	logMessage := fmt.Sprintf("Link %d t√†i li·ªáu b·ªï sung (%v) v·ªõi giao d·ªãch %s", len(linkedDocs), linkedDocs, transactionID)
	if len(errors) > 0 {
		logMessage += fmt.Sprintf(". M·ªôt s·ªë l·ªói: %v", errors)
	}

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "LINK_SUPPLEMENT_DOCUMENTS_TO_TRANSACTION", userID, logMessage)
}

// ========================================
// TRANSACTION MANAGEMENT FUNCTIONS
// ========================================

// CreateSplitRequest - T·∫°o y√™u c·∫ßu t√°ch th·ª≠a (auto-generate txID)
func (s *LandRegistryChaincode) CreateSplitRequest(ctx contractapi.TransactionContextInterface, landParcelID, newParcelsStr, documentIdsStr, reason string) error {
	if err := CheckOrganization(ctx, []string{"Org3MSP"}); err != nil {
		return err
	}
	callerID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	var newParcels []Land
	if err := json.Unmarshal([]byte(newParcelsStr), &newParcels); err != nil {
		return fmt.Errorf("l·ªói khi gi·∫£i m√£ danh s√°ch th·ª≠a ƒë·∫•t m·ªõi: %v", err)
	}
	if err := VerifyLandOwnership(ctx, landParcelID, callerID); err != nil {
		return err
	}
	if err := VerifyLandLegalStatus(ctx, landParcelID, []string{"ƒêang tranh ch·∫•p", "ƒêang th·∫ø ch·∫•p"}); err != nil {
		return err
	}
	existingLand, err := s.QueryLandByID(ctx, landParcelID)
	if err != nil {
		return fmt.Errorf("l·ªói khi truy v·∫•n th·ª≠a ƒë·∫•t %s: %v", landParcelID, err)
	}
	var totalArea float64
	for _, newLand := range newParcels {
		if err := ValidateLand(ctx, newLand, false); err != nil {
			return fmt.Errorf("th·ª≠a ƒë·∫•t m·ªõi %s kh√¥ng h·ª£p l·ªá: %v", newLand.ID, err)
		}
		totalArea += newLand.Area
	}
	if totalArea > existingLand.Area {
		return fmt.Errorf("t·ªïng di·ªán t√≠ch c√°c th·ª≠a m·ªõi (%f m¬≤) v∆∞·ª£t qu√° di·ªán t√≠ch th·ª≠a g·ªëc (%f m¬≤)", totalArea, existingLand.Area)
	}
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// Parse document IDs if provided
	var documentIDs []string
	if documentIdsStr != "" {
		if err := json.Unmarshal([]byte(documentIdsStr), &documentIDs); err != nil {
			return fmt.Errorf("l·ªói khi gi·∫£i m√£ danh s√°ch document IDs: %v", err)
		}
	}

	// T·ª± ƒë·ªông t·∫°o txID v·ªõi timestamp
	txID := fmt.Sprintf("TACH_THUA_%d_%s_%s", txTime.Unix(), callerID, landParcelID)

	// T·∫°o Details v·ªõi l√Ω do
	details := fmt.Sprintf("T√°ch th·ª≠a ƒë·∫•t %s th√†nh %d th·ª≠a", landParcelID, len(newParcels))
	if reason != "" {
		details = fmt.Sprintf("%s. L√Ω do: %s", details, reason)
	}

	tx := Transaction{
		TxID:         txID,
		Type:         "SPLIT",
		LandParcelID: landParcelID,
		ParcelIDs:    []string{}, // Kh·ªüi t·∫°o empty slice thay v√¨ nil
		FromOwnerID:  callerID,
		ToOwnerID:    callerID,
		Status:       "PENDING",
		Details:      details,
		UserID:       callerID, // T·ª± ƒë·ªông ƒëi·ªÅn ng∆∞·ªùi th·ª±c hi·ªán
		DocumentIDs:  documentIDs, // S·ª≠ d·ª•ng documentIDs ƒë∆∞·ª£c parse
		CreatedAt:    txTime,
		UpdatedAt:    txTime,
	}
	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi l∆∞u giao d·ªãch: %v", err)
	}
	for _, newLand := range newParcels {
		newLand.CreatedAt = txTime
		newLand.UpdatedAt = txTime
		newLandJSON, err := json.Marshal(newLand)
		if err != nil {
			return fmt.Errorf("l·ªói khi m√£ h√≥a th·ª≠a ƒë·∫•t m·ªõi: %v", err)
		}
		if err := ctx.GetStub().PutState(newLand.ID, newLandJSON); err != nil {
			return fmt.Errorf("l·ªói khi l∆∞u th·ª≠a ƒë·∫•t m·ªõi %s: %v", newLand.ID, err)
		}
	}
	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "CREATE_SPLIT_REQUEST", callerID, fmt.Sprintf("T·∫°o y√™u c·∫ßu t√°ch th·ª≠a %s", txID))
}

// CreateMergeRequest - T·∫°o y√™u c·∫ßu h·ª£p th·ª≠a (auto-generate txID)
func (s *LandRegistryChaincode) CreateMergeRequest(ctx contractapi.TransactionContextInterface, parcelIDsStr, newParcelStr, documentIdsStr, reason string) error {
	if err := CheckOrganization(ctx, []string{"Org3MSP"}); err != nil {
		return err
	}
	callerID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	var parcelIDs []string
	if err := json.Unmarshal([]byte(parcelIDsStr), &parcelIDs); err != nil {
		return fmt.Errorf("l·ªói khi gi·∫£i m√£ danh s√°ch parcelIDs: %v", err)
	}
	var newLand Land
	if err := json.Unmarshal([]byte(newParcelStr), &newLand); err != nil {
		return fmt.Errorf("l·ªói khi gi·∫£i m√£ th·ª≠a ƒë·∫•t m·ªõi: %v", err)
	}
	var totalArea float64
	for _, parcelID := range parcelIDs {
		if err := VerifyLandOwnership(ctx, parcelID, callerID); err != nil {
			return err
		}
		if err := VerifyLandLegalStatus(ctx, parcelID, []string{"ƒêang tranh ch·∫•p", "ƒêang th·∫ø ch·∫•p"}); err != nil {
			return err
		}
		land, err := s.QueryLandByID(ctx, parcelID)
		if err != nil {
			return fmt.Errorf("l·ªói khi truy v·∫•n th·ª≠a ƒë·∫•t %s: %v", parcelID, err)
		}
		totalArea += land.Area
	}
	if err := ValidateLand(ctx, newLand, false); err != nil {
		return fmt.Errorf("th·ª≠a ƒë·∫•t m·ªõi %s kh√¥ng h·ª£p l·ªá: %v", newLand.ID, err)
	}
	if newLand.Area != totalArea {
		return fmt.Errorf("di·ªán t√≠ch th·ª≠a ƒë·∫•t m·ªõi (%f m¬≤) kh√¥ng kh·ªõp v·ªõi t·ªïng di·ªán t√≠ch c√°c th·ª≠a ƒë·∫•t g·ªëc (%f m¬≤)", newLand.Area, totalArea)
	}
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// Parse document IDs if provided
	var documentIDs []string
	if documentIdsStr != "" {
		if err := json.Unmarshal([]byte(documentIdsStr), &documentIDs); err != nil {
			return fmt.Errorf("l·ªói khi gi·∫£i m√£ danh s√°ch document IDs: %v", err)
		}
	}

	// T·ª± ƒë·ªông t·∫°o txID v·ªõi timestamp
	txID := fmt.Sprintf("HOP_THUA_%d_%s_%v", txTime.Unix(), callerID, parcelIDs)

	// T·∫°o Details v·ªõi l√Ω do
	details := fmt.Sprintf("H·ª£p nh·∫•t c√°c th·ª≠a ƒë·∫•t %v th√†nh %s", parcelIDs, newLand.ID)
	if reason != "" {
		details = fmt.Sprintf("%s. L√Ω do: %s", details, reason)
	}

	tx := Transaction{
		TxID:         txID,
		Type:         "MERGE",
		LandParcelID: newLand.ID,
		ParcelIDs:    parcelIDs,
		FromOwnerID:  callerID,
		ToOwnerID:    callerID,
		Status:       "PENDING",
		Details:      details,
		UserID:       callerID, // T·ª± ƒë·ªông ƒëi·ªÅn ng∆∞·ªùi th·ª±c hi·ªán
		DocumentIDs:  documentIDs, // S·ª≠ d·ª•ng documentIDs ƒë∆∞·ª£c parse
		CreatedAt:    txTime,
		UpdatedAt:    txTime,
	}
	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi l∆∞u giao d·ªãch: %v", err)
	}
	newLand.CreatedAt = txTime
	newLand.UpdatedAt = txTime
	newLandJSON, err := json.Marshal(newLand)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a th·ª≠a ƒë·∫•t m·ªõi: %v", err)
	}
	if err := ctx.GetStub().PutState(newLand.ID, newLandJSON); err != nil {
		return fmt.Errorf("l·ªói khi l∆∞u th·ª≠a ƒë·∫•t m·ªõi %s: %v", newLand.ID, err)
	}
	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "CREATE_MERGE_REQUEST", callerID, fmt.Sprintf("T·∫°o y√™u c·∫ßu h·ª£p th·ª≠a %s", txID))
}

// CreateTransferRequest - T·∫°o y√™u c·∫ßu chuy·ªÉn nh∆∞·ª£ng (auto-generate txID)
func (s *LandRegistryChaincode) CreateTransferRequest(ctx contractapi.TransactionContextInterface, landParcelID, toOwnerID, documentIdsStr, reason string) error {
	if err := CheckOrganization(ctx, []string{"Org3MSP"}); err != nil {
		return err
	}
	callerID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	if err := VerifyLandOwnership(ctx, landParcelID, callerID); err != nil {
		return err
	}
	if err := VerifyLandLegalStatus(ctx, landParcelID, []string{"ƒêang tranh ch·∫•p", "ƒêang th·∫ø ch·∫•p"}); err != nil {
		return err
	}
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// Parse document IDs if provided
	var documentIDs []string
	if documentIdsStr != "" {
		if err := json.Unmarshal([]byte(documentIdsStr), &documentIDs); err != nil {
			return fmt.Errorf("l·ªói khi gi·∫£i m√£ danh s√°ch document IDs: %v", err)
		}
	}

	// T·ª± ƒë·ªông t·∫°o txID v·ªõi timestamp
	txID := fmt.Sprintf("CHUYEN_NHUONG_%d_%s_%s", txTime.Unix(), callerID, landParcelID)

	// T·∫°o Details v·ªõi l√Ω do
	details := fmt.Sprintf("Chuy·ªÉn nh∆∞·ª£ng th·ª≠a ƒë·∫•t %s t·ª´ %s sang %s", landParcelID, callerID, toOwnerID)
	if reason != "" {
		details = fmt.Sprintf("%s. L√Ω do: %s", details, reason)
	}

	tx := Transaction{
		TxID:         txID,
		Type:         "TRANSFER",
		LandParcelID: landParcelID,
		ParcelIDs:    []string{}, // Kh·ªüi t·∫°o empty slice thay v√¨ nil
		FromOwnerID:  callerID,
		ToOwnerID:    toOwnerID,
		Status:       "PENDING",
		Details:      details,
		UserID:       callerID, // T·ª± ƒë·ªông ƒëi·ªÅn ng∆∞·ªùi th·ª±c hi·ªán
		DocumentIDs:  documentIDs, // S·ª≠ d·ª•ng documentIDs ƒë∆∞·ª£c parse
		CreatedAt:    txTime,
		UpdatedAt:    txTime,
	}
	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi l∆∞u giao d·ªãch: %v", err)
	}
	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "CREATE_TRANSFER_REQUEST", callerID, fmt.Sprintf("T·∫°o y√™u c·∫ßu chuy·ªÉn nh∆∞·ª£ng %s", txID))
}

// CreateChangePurposeRequest - T·∫°o y√™u c·∫ßu thay ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng (auto-generate txID)
func (s *LandRegistryChaincode) CreateChangePurposeRequest(ctx contractapi.TransactionContextInterface, landParcelID, newPurpose, documentIdsStr, reason string) error {
	if err := CheckOrganization(ctx, []string{"Org3MSP"}); err != nil {
		return err
	}
	callerID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	if err := VerifyLandOwnership(ctx, landParcelID, callerID); err != nil {
		return err
	}
	if err := VerifyLandLegalStatus(ctx, landParcelID, []string{"ƒêang tranh ch·∫•p", "ƒêang th·∫ø ch·∫•p"}); err != nil {
		return err
	}
	if err := ValidateLandUsePurpose(newPurpose); err != nil {
		return err
	}
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// Parse document IDs if provided
	var documentIDs []string
	if documentIdsStr != "" {
		if err := json.Unmarshal([]byte(documentIdsStr), &documentIDs); err != nil {
			return fmt.Errorf("l·ªói khi gi·∫£i m√£ danh s√°ch document IDs: %v", err)
		}
	}

	// T·ª± ƒë·ªông t·∫°o txID v·ªõi timestamp
	txID := fmt.Sprintf("DOI_MUC_DICH_%d_%s_%s", txTime.Unix(), callerID, landParcelID)

	// T·∫°o Details v·ªõi l√Ω do
	details := fmt.Sprintf("Thay ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng ƒë·∫•t %s sang %s", landParcelID, newPurpose)
	if reason != "" {
		details = fmt.Sprintf("%s. L√Ω do: %s", details, reason)
	}

	tx := Transaction{
		TxID:         txID,
		Type:         "CHANGE_PURPOSE",
		LandParcelID: landParcelID,
		ParcelIDs:    []string{}, // Kh·ªüi t·∫°o empty slice thay v√¨ nil
		FromOwnerID:  callerID,
		ToOwnerID:    callerID,
		Status:       "PENDING",
		Details:      details,
		UserID:       callerID, // T·ª± ƒë·ªông ƒëi·ªÅn ng∆∞·ªùi th·ª±c hi·ªán
		DocumentIDs:  documentIDs, // S·ª≠ d·ª•ng documentIDs ƒë∆∞·ª£c parse
		CreatedAt:    txTime,
		UpdatedAt:    txTime,
	}
	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi l∆∞u giao d·ªãch: %v", err)
	}
	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "CREATE_CHANGE_PURPOSE_REQUEST", callerID, fmt.Sprintf("T·∫°o y√™u c·∫ßu thay ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng %s", txID))
}

// CreateReissueRequest - T·∫°o y√™u c·∫ßu c·∫•p l·∫°i gi·∫•y ch·ª©ng nh·∫≠n (auto-generate txID)
func (s *LandRegistryChaincode) CreateReissueRequest(ctx contractapi.TransactionContextInterface, landParcelID, documentIdsStr, reason string) error {
	if err := CheckOrganization(ctx, []string{"Org3MSP"}); err != nil {
		return err
	}
	callerID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	if err := VerifyLandOwnership(ctx, landParcelID, callerID); err != nil {
		return err
	}
	if err := VerifyLandLegalStatus(ctx, landParcelID, []string{"ƒêang tranh ch·∫•p", "ƒêang th·∫ø ch·∫•p"}); err != nil {
		return err
	}
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// Parse document IDs if provided
	var documentIDs []string
	if documentIdsStr != "" {
		if err := json.Unmarshal([]byte(documentIdsStr), &documentIDs); err != nil {
			return fmt.Errorf("l·ªói khi gi·∫£i m√£ danh s√°ch document IDs: %v", err)
		}
	}

	// T·ª± ƒë·ªông t·∫°o txID v·ªõi timestamp
	txID := fmt.Sprintf("CAP_LAI_GCN_%d_%s_%s", txTime.Unix(), callerID, landParcelID)

	// T·∫°o Details v·ªõi l√Ω do
	details := fmt.Sprintf("Y√™u c·∫ßu c·∫•p l·∫°i GCN cho th·ª≠a ƒë·∫•t %s", landParcelID)
	if reason != "" {
		details = fmt.Sprintf("%s. L√Ω do: %s", details, reason)
	}

	tx := Transaction{
		TxID:         txID,
		Type:         "REISSUE",
		LandParcelID: landParcelID,
		ParcelIDs:    []string{}, // Kh·ªüi t·∫°o empty slice thay v√¨ nil
		FromOwnerID:  callerID,
		ToOwnerID:    callerID,
		Status:       "PENDING",
		Details:      details,
		UserID:       callerID, // T·ª± ƒë·ªông ƒëi·ªÅn ng∆∞·ªùi th·ª±c hi·ªán
		DocumentIDs:  documentIDs, // S·ª≠ d·ª•ng documentIDs ƒë∆∞·ª£c parse
		CreatedAt:    txTime,
		UpdatedAt:    txTime,
	}
	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi l∆∞u giao d·ªãch: %v", err)
	}
	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "CREATE_REISSUE_REQUEST", callerID, fmt.Sprintf("T·∫°o y√™u c·∫ßu c·∫•p l·∫°i GCN %s", txID))
}

// ConfirmTransfer - X√°c nh·∫≠n ho·∫∑c t·ª´ ch·ªëi chuy·ªÉn nh∆∞·ª£ng (b·ªüi ng∆∞·ªùi nh·∫≠n)
func (s *LandRegistryChaincode) ConfirmTransfer(ctx contractapi.TransactionContextInterface, txID, landParcelID, toOwnerID, isAcceptedStr, reason string) error {
	if err := CheckOrganization(ctx, []string{"Org3MSP"}); err != nil {
		return err
	}
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	tx, err := GetTransaction(ctx, txID)
	if err != nil {
		return err
	}
	if tx.Type != "TRANSFER" {
		return fmt.Errorf("giao d·ªãch %s kh√¥ng ph·∫£i l√† chuy·ªÉn nh∆∞·ª£ng", txID)
	}
	if tx.ToOwnerID != userID {
		return fmt.Errorf("ng∆∞·ªùi d√πng %s kh√¥ng ph·∫£i l√† ng∆∞·ªùi nh·∫≠n chuy·ªÉn nh∆∞·ª£ng", userID)
	}
	if tx.Status != "APPROVED" {
		return fmt.Errorf("giao d·ªãch %s kh√¥ng ·ªü tr·∫°ng th√°i APPROVED ƒë·ªÉ x√°c nh·∫≠n", txID)
	}

	// Parse isAccepted
	isAccepted := isAcceptedStr == "true"
	
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	var actionLog string
	if isAccepted {
		tx.Status = "CONFIRMED"
		tx.Details = fmt.Sprintf("%s; Ng∆∞·ªùi nh·∫≠n ƒë√£ ch·∫•p nh·∫≠n chuy·ªÉn nh∆∞·ª£ng", tx.Details)
		actionLog = "CONFIRM_TRANSFER_ACCEPTED"
	} else {
		tx.Status = "REJECTED"
		if reason != "" {
			tx.Details = fmt.Sprintf("%s; Ng∆∞·ªùi nh·∫≠n t·ª´ ch·ªëi chuy·ªÉn nh∆∞·ª£ng - L√Ω do: %s", tx.Details, reason)
		} else {
			tx.Details = fmt.Sprintf("%s; Ng∆∞·ªùi nh·∫≠n t·ª´ ch·ªëi chuy·ªÉn nh∆∞·ª£ng", tx.Details)
		}
		actionLog = "CONFIRM_TRANSFER_REJECTED"
	}
	
	tx.UpdatedAt = txTime
	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t giao d·ªãch: %v", err)
	}
	
	actionText := "ch·∫•p nh·∫≠n"
	if !isAccepted {
		actionText = "t·ª´ ch·ªëi"
	}
	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), actionLog, userID, fmt.Sprintf("Ng∆∞·ªùi nh·∫≠n %s chuy·ªÉn nh∆∞·ª£ng %s", actionText, txID))
}

// ========================================
// TRANSACTION PROCESSING FUNCTIONS (ORG2)
// ========================================

// ProcessTransaction - X·ª≠ l√Ω v√† th·∫©m ƒë·ªãnh giao d·ªãch v·ªõi 3 tr·∫°ng th√°i (Org2) - UC-31
func (s *LandRegistryChaincode) ProcessTransaction(ctx contractapi.TransactionContextInterface, txID, decision, reason string) error {
	if err := CheckOrganization(ctx, []string{"Org2MSP"}); err != nil {
		return err
	}
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	tx, err := GetTransaction(ctx, txID)
	if err != nil {
		return err
	}
	// Ki·ªÉm tra tr·∫°ng th√°i d·ª±a tr√™n lo·∫°i giao d·ªãch
	if tx.Type == "TRANSFER" {
		// Giao d·ªãch TRANSFER c·∫ßn c√≥ x√°c nh·∫≠n t·ª´ ng∆∞·ªùi nh·∫≠n tr∆∞·ªõc
		if tx.Status != "CONFIRMED" {
			return fmt.Errorf("giao d·ªãch chuy·ªÉn nh∆∞·ª£ng %s ch∆∞a ƒë∆∞·ª£c ng∆∞·ªùi nh·∫≠n x√°c nh·∫≠n", txID)
		}
	} else {
		// C√°c lo·∫°i giao d·ªãch kh√°c (SPLIT, MERGE, CHANGE_PURPOSE, REISSUE) x·ª≠ l√Ω tr·ª±c ti·∫øp t·ª´ PENDING
		if tx.Status != "PENDING" {
			return fmt.Errorf("giao d·ªãch %s kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù x·ª≠ l√Ω", txID)
		}
	}

	// Ki·ªÉm tra v√† x√°c minh t√†i li·ªáu tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh
	var verifiedDocs, rejectedDocs []string
	var docErrors []string

	// X·ª≠ l√Ω x√°c minh t·ª´ng t√†i li·ªáu ƒë√≠nh k√®m
	for _, docID := range tx.DocumentIDs {
		doc, err := s.GetDocument(ctx, docID)
		if err != nil {
			docErrors = append(docErrors, fmt.Sprintf("Kh√¥ng t√¨m th·∫•y t√†i li·ªáu %s", docID))
			continue
		}

		// T·ª± ƒë·ªông x√°c minh t√†i li·ªáu (gi·∫£ ƒë·ªãnh logic x√°c minh)
		if doc.Type != "" && doc.IPFSHash != "" {
			if !IsDocumentVerified(doc) {
				// T·ª± ƒë·ªông x√°c minh t√†i li·ªáu h·ª£p l·ªá
				txTime, _ := GetTxTimestampAsTime(ctx)
				SetDocumentVerified(doc, userID, txTime)

				docJSON, _ := json.Marshal(doc)
				ctx.GetStub().PutState(docID, docJSON)
			}
			verifiedDocs = append(verifiedDocs, doc.Title)
		} else {
			rejectedDocs = append(rejectedDocs, doc.Title)
		}
	}

	// X·ª≠ l√Ω theo 3 tr·∫°ng th√°i quy·∫øt ƒë·ªãnh
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	var logAction, statusDetails string

	switch decision {
	case "APPROVE":
		// X√°c nh·∫≠n ƒë·∫°t y√™u c·∫ßu v√† chuy·ªÉn ti·∫øp
		if len(rejectedDocs) > 0 {
			return fmt.Errorf("kh√¥ng th·ªÉ ph√™ duy·ªát v√¨ c√≥ t√†i li·ªáu kh√¥ng h·ª£p l·ªá: %v", rejectedDocs)
		}
		tx.Status = "VERIFIED"
		statusDetails = fmt.Sprintf("H·ªì s∆° ƒë·∫°t y√™u c·∫ßu. ƒê√£ x√°c minh %d t√†i li·ªáu: %v", len(verifiedDocs), verifiedDocs)
		if reason != "" {
			statusDetails += fmt.Sprintf(". Ghi ch√∫: %s", reason)
		}
		logAction = "X√°c nh·∫≠n ƒë·∫°t y√™u c·∫ßu v√† chuy·ªÉn ti·∫øp"

	case "SUPPLEMENT":
		// Y√™u c·∫ßu b·ªï sung
		tx.Status = "SUPPLEMENT_REQUESTED"
		statusDetails = fmt.Sprintf("Y√™u c·∫ßu b·ªï sung t√†i li·ªáu.")
		if len(verifiedDocs) > 0 {
			statusDetails += fmt.Sprintf(" ƒê√£ x√°c minh %d t√†i li·ªáu: %v.", len(verifiedDocs), verifiedDocs)
		}
		if len(rejectedDocs) > 0 {
			statusDetails += fmt.Sprintf(" T√†i li·ªáu c·∫ßn b·ªï sung/s·ª≠a: %v.", rejectedDocs)
		}
		if reason != "" {
			statusDetails += fmt.Sprintf(" L√Ω do: %s", reason)
		}
		logAction = "Y√™u c·∫ßu b·ªï sung t√†i li·ªáu"

	case "REJECT":
		// T·ª´ ch·ªëi h·ªì s∆°
		tx.Status = "REJECTED"
		statusDetails = fmt.Sprintf("H·ªì s∆° b·ªã t·ª´ ch·ªëi.")
		if reason == "" {
			return fmt.Errorf("ph·∫£i c√≥ l√Ω do khi t·ª´ ch·ªëi h·ªì s∆°")
		}
		statusDetails += fmt.Sprintf(" L√Ω do: %s", reason)
		if len(rejectedDocs) > 0 {
			statusDetails += fmt.Sprintf(" T√†i li·ªáu kh√¥ng h·ª£p l·ªá: %v", rejectedDocs)
		}
		logAction = "T·ª´ ch·ªëi h·ªì s∆°"

	default:
		return fmt.Errorf("quy·∫øt ƒë·ªãnh kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng: APPROVE, SUPPLEMENT, ho·∫∑c REJECT")
	}

	// C·∫≠p nh·∫≠t th√¥ng tin giao d·ªãch
	tx.Details = statusDetails
	tx.UpdatedAt = txTime

	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t giao d·ªãch: %v", err)
	}

	// Ghi log chi ti·∫øt
	logDetails := fmt.Sprintf("%s giao d·ªãch %s. %s", logAction, txID, statusDetails)
	if len(docErrors) > 0 {
		logDetails += fmt.Sprintf(" L·ªói t√†i li·ªáu: %v", docErrors)
	}

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "PROCESS_TRANSACTION_DOSSIER", userID, logDetails)
}

// ForwardTransaction - Chuy·ªÉn ti·∫øp giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n l√™n S·ªü TN&MT (Org2)
func (s *LandRegistryChaincode) ForwardTransaction(ctx contractapi.TransactionContextInterface, txID string) error {
	if err := CheckOrganization(ctx, []string{"Org2MSP"}); err != nil {
		return err
	}
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	tx, err := GetTransaction(ctx, txID)
	if err != nil {
		return err
	}
	// Ch·ªâ cho ph√©p chuy·ªÉn ti·∫øp giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n (VERIFIED)
	if tx.Status != "VERIFIED" {
		return fmt.Errorf("ch·ªâ c√≥ th·ªÉ chuy·ªÉn ti·∫øp giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n ƒë·∫°t y√™u c·∫ßu (tr·∫°ng th√°i VERIFIED)")
	}
	
	tx.Status = "FORWARDED"
	tx.Details = fmt.Sprintf("%s; ƒê√£ chuy·ªÉn ti·∫øp h·ªì s∆° l√™n S·ªü TN&MT ƒë·ªÉ ph√™ duy·ªát", tx.Details)
	
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}
	tx.UpdatedAt = txTime
	
	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t giao d·ªãch: %v", err)
	}
	
	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "FORWARD_TRANSACTION", userID, fmt.Sprintf("Chuy·ªÉn ti·∫øp giao d·ªãch %s l√™n S·ªü TN&MT", txID))
}

// ========================================
// TRANSACTION APPROVAL FUNCTIONS (ORG1)
// ========================================

// ApproveTransferTransaction - Ph√™ duy·ªát giao d·ªãch chuy·ªÉn nh∆∞·ª£ng
func (s *LandRegistryChaincode) ApproveTransferTransaction(ctx contractapi.TransactionContextInterface, txID string) error {
	if err := CheckOrganization(ctx, []string{"Org1MSP"}); err != nil {
		return err
	}
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	tx, err := GetTransaction(ctx, txID)
	if err != nil {
		return err
	}
	if tx.Status != "FORWARDED" {
		return fmt.Errorf("giao d·ªãch %s kh√¥ng ·ªü tr·∫°ng th√°i FORWARDED", txID)
	}
	if tx.Type != "TRANSFER" {
		return fmt.Errorf("giao d·ªãch %s kh√¥ng ph·∫£i l√† chuy·ªÉn nh∆∞·ª£ng", txID)
	}

	land, err := s.QueryLandByID(ctx, tx.LandParcelID)
	if err != nil {
		return fmt.Errorf("l·ªói khi truy v·∫•n th·ª≠a ƒë·∫•t %s: %v", tx.LandParcelID, err)
	}
	if land.OwnerID != tx.FromOwnerID {
		return fmt.Errorf("ng∆∞·ªùi d√πng %s kh√¥ng s·ªü h·ªØu th·ª≠a ƒë·∫•t %s", tx.FromOwnerID, tx.LandParcelID)
	}

	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// V√¥ hi·ªáu h√≥a gi·∫•y ch·ª©ng nh·∫≠n c≈© (do ch·ªß s·ª≠ d·ª•ng thay ƒë·ªïi)
	if land.CertificateID != "" {
		land.CertificateID = "" // X√≥a gi·∫•y ch·ª©ng nh·∫≠n c≈©
		land.IssueDate = time.Time{} // Reset ng√†y c·∫•p
		land.LegalInfo = "Gi·∫•y ch·ª©ng nh·∫≠n ƒë√£ v√¥ hi·ªáu do chuy·ªÉn nh∆∞·ª£ng quy·ªÅn s·ª≠ d·ª•ng ƒë·∫•t"
	}

	// C·∫≠p nh·∫≠t ch·ªß s·ª≠ d·ª•ng th·ª≠a ƒë·∫•t
	land.OwnerID = tx.ToOwnerID
	land.UpdatedAt = txTime
	landJSON, err := json.Marshal(land)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a th·ª≠a ƒë·∫•t: %v", err)
	}
	if err := ctx.GetStub().PutState(tx.LandParcelID, landJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t th·ª≠a ƒë·∫•t: %v", err)
	}

	// C·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch
	tx.Status = "APPROVED"
	tx.Details = fmt.Sprintf("%s; ƒê√£ ph√™ duy·ªát chuy·ªÉn nh∆∞·ª£ng", tx.Details)
	tx.UpdatedAt = txTime
	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t giao d·ªãch: %v", err)
	}

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "APPROVE_TRANSFER", userID, fmt.Sprintf("Ph√™ duy·ªát chuy·ªÉn nh∆∞·ª£ng %s", txID))
}

// ApproveReissueTransaction - Ph√™ duy·ªát giao d·ªãch c·∫•p ƒë·ªïi gi·∫•y ch·ª©ng nh·∫≠n v·ªõi IPFS hash m·ªõi
func (s *LandRegistryChaincode) ApproveReissueTransaction(ctx contractapi.TransactionContextInterface, txID string, newCertificateID string) error {
	if err := CheckOrganization(ctx, []string{"Org1MSP"}); err != nil {
		return err
	}
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	tx, err := GetTransaction(ctx, txID)
	if err != nil {
		return err
	}
	if tx.Status != "FORWARDED" {
		return fmt.Errorf("giao d·ªãch %s kh√¥ng ·ªü tr·∫°ng th√°i FORWARDED", txID)
	}
	if tx.Type != "REISSUE" {
		return fmt.Errorf("giao d·ªãch %s kh√¥ng ph·∫£i l√† c·∫•p ƒë·ªïi gi·∫•y ch·ª©ng nh·∫≠n", txID)
	}

	// Validate newCertificateID as IPFS hash
	if newCertificateID == "" {
		return fmt.Errorf("newCertificateID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
	}
	if len(newCertificateID) < 10 {
		return fmt.Errorf("newCertificateID ph·∫£i l√† IPFS hash h·ª£p l·ªá")
	}

	land, err := s.QueryLandByID(ctx, tx.LandParcelID)
	if err != nil {
		return fmt.Errorf("l·ªói khi truy v·∫•n th·ª≠a ƒë·∫•t %s: %v", tx.LandParcelID, err)
	}
	if land.OwnerID != tx.FromOwnerID {
		return fmt.Errorf("ng∆∞·ªùi d√πng %s kh√¥ng s·ªü h·ªØu th·ª≠a ƒë·∫•t %s", tx.FromOwnerID, tx.LandParcelID)
	}

	if err := VerifyLandLegalStatus(ctx, tx.LandParcelID, []string{"ƒêang tranh ch·∫•p", "ƒêang th·∫ø ch·∫•p"}); err != nil {
		return err
	}

	// S·ª≠ d·ª•ng UpdateLandParcel ƒë·ªÉ c·∫≠p nh·∫≠t GCN v√† th√¥ng tin ph√°p l√Ω
	legalInfo := fmt.Sprintf("C·∫•p ƒë·ªïi GCN cho th·ª≠a ƒë·∫•t %s", tx.LandParcelID)
	err = s.UpdateLandParcel(ctx, tx.LandParcelID, fmt.Sprintf("%.2f", land.Area), land.Location, land.LandUsePurpose, land.LegalStatus, newCertificateID, legalInfo)
	if err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t th·ª≠a ƒë·∫•t: %v", err)
	}

	// C·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch
	tx.Status = "APPROVED"
	tx.Details = fmt.Sprintf("%s; ƒê√£ ph√™ duy·ªát c·∫•p ƒë·ªïi gi·∫•y ch·ª©ng nh·∫≠n v·ªõi IPFS hash: %s", tx.Details, newCertificateID)
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}
	tx.UpdatedAt = txTime
	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t giao d·ªãch: %v", err)
	}

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "APPROVE_REISSUE", userID, fmt.Sprintf("Ph√™ duy·ªát c·∫•p ƒë·ªïi GCN cho th·ª≠a ƒë·∫•t %s v·ªõi IPFS hash: %s", tx.LandParcelID, newCertificateID))
}

// ApproveSplitTransaction - Ph√™ duy·ªát giao d·ªãch t√°ch th·ª≠a v√† t·∫°o c√°c th·ª≠a ƒë·∫•t m·ªõi
func (s *LandRegistryChaincode) ApproveSplitTransaction(ctx contractapi.TransactionContextInterface, txID string) error {
	if err := CheckOrganization(ctx, []string{"Org1MSP"}); err != nil {
		return err
	}
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	tx, err := GetTransaction(ctx, txID)
	if err != nil {
		return err
	}
	if tx.Status != "FORWARDED" {
		return fmt.Errorf("giao d·ªãch %s kh√¥ng ·ªü tr·∫°ng th√°i FORWARDED", txID)
	}
	if tx.Type != "SPLIT" {
		return fmt.Errorf("giao d·ªãch %s kh√¥ng ph·∫£i l√† t√°ch th·ª≠a", txID)
	}

	// L·∫•y th√¥ng tin th·ª≠a ƒë·∫•t g·ªëc ƒë·ªÉ ki·ªÉm tra
	originalLand, err := s.QueryLandByID(ctx, tx.LandParcelID)
	if err != nil {
		return fmt.Errorf("l·ªói khi truy v·∫•n th·ª≠a ƒë·∫•t %s: %v", tx.LandParcelID, err)
	}

	// Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
	if originalLand.OwnerID != tx.FromOwnerID {
		return fmt.Errorf("ng∆∞·ªùi d√πng %s kh√¥ng s·ªü h·ªØu th·ª≠a ƒë·∫•t %s", tx.FromOwnerID, tx.LandParcelID)
	}

	// T·∫°o c√°c th·ª≠a ƒë·∫•t m·ªõi t·ª´ th√¥ng tin trong transaction
	// C√°c th·ª≠a ƒë·∫•t m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o trong CreateSplitRequest
	// ·ªû ƒë√¢y ch·ªâ c·∫ßn x√≥a th·ª≠a ƒë·∫•t g·ªëc v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i

	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// V√¥ hi·ªáu h√≥a th·ª≠a ƒë·∫•t g·ªëc (gi·ªØ l·∫°i ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠, kh√¥ng x√≥a)
	if originalLand.CertificateID != "" {
		originalLand.CertificateID = "" // V√¥ hi·ªáu h√≥a gi·∫•y ch·ª©ng nh·∫≠n c≈©
		originalLand.IssueDate = time.Time{} // Reset ng√†y c·∫•p
		originalLand.LegalInfo = "Gi·∫•y ch·ª©ng nh·∫≠n ƒë√£ v√¥ hi·ªáu do t√°ch th·ª≠a ƒë·∫•t"
	}
	
	// ƒê√°nh d·∫•u th·ª≠a ƒë·∫•t c≈© l√† kh√¥ng c√≤n ho·∫°t ƒë·ªông (ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠)
	originalLand.LegalStatus = ""
	originalLand.UpdatedAt = txTime
	
	// C·∫≠p nh·∫≠t th·ª≠a ƒë·∫•t g·ªëc (gi·ªØ l·∫°i, kh√¥ng x√≥a)
	updatedLandJSON, err := json.Marshal(originalLand)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a th·ª≠a ƒë·∫•t c≈©: %v", err)
	}
	if err := ctx.GetStub().PutState(tx.LandParcelID, updatedLandJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t th·ª≠a ƒë·∫•t g·ªëc %s: %v", tx.LandParcelID, err)
	}

	// C·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch
	tx.Status = "APPROVED"
	tx.Details = fmt.Sprintf("%s; ƒê√£ ph√™ duy·ªát t√°ch th·ª≠a v√† t·∫°o %d th·ª≠a ƒë·∫•t m·ªõi", tx.Details, len(tx.ParcelIDs))
	tx.UpdatedAt = txTime
	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t giao d·ªãch: %v", err)
	}

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "APPROVE_SPLIT", userID, fmt.Sprintf("Ph√™ duy·ªát t√°ch th·ª≠a %s th√†nh %d th·ª≠a m·ªõi", txID, len(tx.ParcelIDs)))
}

// ApproveMergeTransaction - Ph√™ duy·ªát giao d·ªãch h·ª£p th·ª≠a v√† t·∫°o th·ª≠a ƒë·∫•t m·ªõi
func (s *LandRegistryChaincode) ApproveMergeTransaction(ctx contractapi.TransactionContextInterface, txID string) error {
	if err := CheckOrganization(ctx, []string{"Org1MSP"}); err != nil {
		return err
	}
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	tx, err := GetTransaction(ctx, txID)
	if err != nil {
		return err
	}
	if tx.Status != "FORWARDED" {
		return fmt.Errorf("giao d·ªãch %s kh√¥ng ·ªü tr·∫°ng th√°i FORWARDED", txID)
	}
	if tx.Type != "MERGE" {
		return fmt.Errorf("giao d·ªãch %s kh√¥ng ph·∫£i l√† h·ª£p th·ª≠a", txID)
	}

	// Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu t·∫•t c·∫£ c√°c th·ª≠a ƒë·∫•t
	for _, parcelID := range tx.ParcelIDs {
		parcelID = strings.TrimSpace(parcelID)
		land, err := s.QueryLandByID(ctx, parcelID)
		if err != nil {
			return fmt.Errorf("l·ªói khi truy v·∫•n th·ª≠a ƒë·∫•t %s: %v", parcelID, err)
		}
		if land.OwnerID != tx.FromOwnerID {
			return fmt.Errorf("ng∆∞·ªùi d√πng %s kh√¥ng s·ªü h·ªØu th·ª≠a ƒë·∫•t %s", tx.FromOwnerID, parcelID)
		}
	}

	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// V√¥ hi·ªáu h√≥a c√°c th·ª≠a ƒë·∫•t g·ªëc (gi·ªØ l·∫°i ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠, kh√¥ng x√≥a)
	for _, parcelID := range tx.ParcelIDs {
		parcelID = strings.TrimSpace(parcelID)
		
		// L·∫•y th√¥ng tin th·ª≠a ƒë·∫•t ƒë·ªÉ v√¥ hi·ªáu h√≥a
		originalLand, err := s.QueryLandByID(ctx, parcelID)
		if err != nil {
			return fmt.Errorf("l·ªói khi truy v·∫•n th·ª≠a ƒë·∫•t %s: %v", parcelID, err)
		}
		
		// V√¥ hi·ªáu h√≥a gi·∫•y ch·ª©ng nh·∫≠n
		if originalLand.CertificateID != "" {
			originalLand.CertificateID = "" // V√¥ hi·ªáu h√≥a gi·∫•y ch·ª©ng nh·∫≠n c≈©
			originalLand.IssueDate = time.Time{} // Reset ng√†y c·∫•p
			originalLand.LegalInfo = "Gi·∫•y ch·ª©ng nh·∫≠n ƒë√£ v√¥ hi·ªáu do h·ª£p th·ª≠a ƒë·∫•t"
		}
		
		// ƒê√°nh d·∫•u th·ª≠a ƒë·∫•t c≈© l√† kh√¥ng c√≤n ho·∫°t ƒë·ªông (ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠)
		originalLand.LegalStatus = ""
		originalLand.UpdatedAt = txTime
		
		// C·∫≠p nh·∫≠t th·ª≠a ƒë·∫•t g·ªëc (gi·ªØ l·∫°i, kh√¥ng x√≥a)
		updatedLandJSON, err := json.Marshal(originalLand)
		if err != nil {
			return fmt.Errorf("l·ªói khi m√£ h√≥a th·ª≠a ƒë·∫•t c≈© %s: %v", parcelID, err)
		}
		if err := ctx.GetStub().PutState(parcelID, updatedLandJSON); err != nil {
			return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t th·ª≠a ƒë·∫•t g·ªëc %s: %v", parcelID, err)
		}
	}

	// Th·ª≠a ƒë·∫•t m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o trong CreateMergeRequest
	// ·ªû ƒë√¢y ch·ªâ c·∫ßn c·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch

	// C·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch
	tx.Status = "APPROVED"
	tx.Details = fmt.Sprintf("%s; ƒê√£ ph√™ duy·ªát h·ª£p th·ª≠a v√† t·∫°o th·ª≠a ƒë·∫•t m·ªõi", tx.Details)
	tx.UpdatedAt = txTime
	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t giao d·ªãch: %v", err)
	}

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "APPROVE_MERGE", userID, fmt.Sprintf("Ph√™ duy·ªát h·ª£p th·ª≠a %s th√†nh th·ª≠a m·ªõi", txID))
}

// ApproveChangePurposeTransaction - Ph√™ duy·ªát giao d·ªãch thay ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng
func (s *LandRegistryChaincode) ApproveChangePurposeTransaction(ctx contractapi.TransactionContextInterface, txID string) error {
	if err := CheckOrganization(ctx, []string{"Org1MSP"}); err != nil {
		return err
	}
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	tx, err := GetTransaction(ctx, txID)
	if err != nil {
		return err
	}
	if tx.Status != "FORWARDED" {
		return fmt.Errorf("giao d·ªãch %s kh√¥ng ·ªü tr·∫°ng th√°i FORWARDED", txID)
	}
	if tx.Type != "CHANGE_PURPOSE" {
		return fmt.Errorf("giao d·ªãch %s kh√¥ng ph·∫£i l√† thay ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng", txID)
	}

	land, err := s.QueryLandByID(ctx, tx.LandParcelID)
	if err != nil {
		return fmt.Errorf("l·ªói khi truy v·∫•n th·ª≠a ƒë·∫•t %s: %v", tx.LandParcelID, err)
	}

	// Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
	if land.OwnerID != tx.FromOwnerID {
		return fmt.Errorf("ng∆∞·ªùi d√πng %s kh√¥ng s·ªü h·ªØu th·ª≠a ƒë·∫•t %s", tx.FromOwnerID, tx.LandParcelID)
	}

	// Tr√≠ch xu·∫•t m·ª•c ƒë√≠ch s·ª≠ d·ª•ng m·ªõi t·ª´ details
	newPurpose := strings.Split(tx.Details, "sang ")[1]
	if err := ValidateLandUsePurpose(newPurpose); err != nil {
		return err
	}

	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}

	// V√¥ hi·ªáu h√≥a gi·∫•y ch·ª©ng nh·∫≠n c≈© (do th√¥ng tin thay ƒë·ªïi)
	if land.CertificateID != "" {
		land.CertificateID = "" // X√≥a gi·∫•y ch·ª©ng nh·∫≠n c≈©
		land.IssueDate = time.Time{} // Reset ng√†y c·∫•p
		land.LegalInfo = "Gi·∫•y ch·ª©ng nh·∫≠n ƒë√£ v√¥ hi·ªáu do thay ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng ƒë·∫•t"
	}

	// C·∫≠p nh·∫≠t m·ª•c ƒë√≠ch s·ª≠ d·ª•ng
	land.LandUsePurpose = newPurpose
	land.UpdatedAt = txTime
	landJSON, err := json.Marshal(land)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a th·ª≠a ƒë·∫•t: %v", err)
	}
	if err := ctx.GetStub().PutState(tx.LandParcelID, landJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t th·ª≠a ƒë·∫•t: %v", err)
	}

	// C·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch
	tx.Status = "APPROVED"
	tx.Details = fmt.Sprintf("%s; ƒê√£ ph√™ duy·ªát thay ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng", tx.Details)
	tx.UpdatedAt = txTime
	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t giao d·ªãch: %v", err)
	}

	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "APPROVE_CHANGE_PURPOSE", userID, fmt.Sprintf("Ph√™ duy·ªát thay ƒë·ªïi m·ª•c ƒë√≠ch s·ª≠ d·ª•ng %s", txID))
}

// RejectTransaction - T·ª´ ch·ªëi giao d·ªãch
func (s *LandRegistryChaincode) RejectTransaction(ctx contractapi.TransactionContextInterface, txID, reason string) error {
	if err := CheckOrganization(ctx, []string{"Org1MSP"}); err != nil {
		return err
	}
	userID, err := GetCallerID(ctx)
	if err != nil {
		return err
	}
	tx, err := GetTransaction(ctx, txID)
	if err != nil {
		return err
	}
	if tx.Status != "FORWARDED" {
		return fmt.Errorf("giao d·ªãch %s kh√¥ng ·ªü tr·∫°ng th√°i FORWARDED", txID)
	}
	tx.Status = "REJECTED"
	tx.Details = fmt.Sprintf("%s; L√Ω do t·ª´ ch·ªëi: %s", tx.Details, reason)
	txTime, err := GetTxTimestampAsTime(ctx)
	if err != nil {
		return fmt.Errorf("l·ªói khi l·∫•y timestamp: %v", err)
	}
	tx.UpdatedAt = txTime
	txJSON, err := json.Marshal(tx)
	if err != nil {
		return fmt.Errorf("l·ªói khi m√£ h√≥a giao d·ªãch: %v", err)
	}
	if err := ctx.GetStub().PutState(txID, txJSON); err != nil {
		return fmt.Errorf("l·ªói khi c·∫≠p nh·∫≠t giao d·ªãch: %v", err)
	}
	return RecordTransactionLog(ctx, ctx.GetStub().GetTxID(), "REJECT_TRANSACTION", userID, fmt.Sprintf("T·ª´ ch·ªëi giao d·ªãch %s: %s", txID, reason))
}


